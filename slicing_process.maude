fmod SEMANTICS-SLICING is
  pr SEMANTIC-INFERENCE .
  pr META-LEVEL .
  pr CONVERSION .

  vars HTR HTR' HTR'' : HypernodeTraversalResult .
  vars QS QS' QS1 QS2 Orange : QidSet .
  vars SET SET' : SideEffectsTuple .
  vars TL TL' TL'' TL3 : TermList .
  vars T T' T'' TV TN : Term .
  var  SSDS : SubsortDeclSet .
  var  OS ELS RLS : QidSet .
  var  DS : DirectionSet .
  var  EqS : EquationSet .
  var  COND : Condition .
  var  OIL : OpInfoList .
  var  ODS : OpDeclSet .
  var  TyL : TypeList .
  vars Q Q' Q'' : Qid .
  vars Ty Ty' : Type .
  var  Eq : Equation .
  var  AtS : AttrSet .
  var  C : Constant .
  var  V : Variable .
  var  SS : SortSet .
  var  RS : RuleSet .
  var  NL : NatList .
  vars S S' : Sort .
  vars B B' : Bool .
  var  M : Module .
  vars N N' : Nat .
  var  R : Rule .

  sorts SlicingResult SideEffectsTuple .

  op noResult : -> SlicingResult [ctor] .
  op sr : SideEffectsTuple -> SlicingResult . *** For testing purposes
  op hypernode : QidSet -> SlicingResult . *** For testing purposes
  op term : Term -> SlicingResult . *** For testing purposes
  op htr : HypernodeTraversalResult TermList -> SlicingResult . *** For testing purposes
  op ds : DirectionSet -> SlicingResult . *** For testing purposes
  op sliRes : QidSet TermList DirectionSet -> SlicingResult [ctor] .

  op getVarsInSlicingSet : SlicingResult ~> TermList .
  eq getVarsInSlicingSet(sliRes(QS, TL, DS)) = TL .

  op getDSInSlicingSet : SlicingResult ~> DirectionSet .
  eq getDSInSlicingSet(sliRes(QS, TL, DS)) = DS .

***(%
\end{verbatim}
}

The constructor for \texttt{SideEffectsTuple} keeps the set of operators, the set
of equation labels, and the set of rule labels generating side effects:

{\codesize
\begin{verbatim}
%)

  op <_,_,_> : QidSet QidSet QidSet -> SideEffectsTuple [ctor] .

***(%
\end{verbatim}
}

The projection functions for the \texttt{SideEffectsTuple} are \texttt{getOps},
\texttt{getEqLbls}, and \texttt{getRlLbls}:

{\codesize
\begin{verbatim}
%)

  ops getOps getEqLbls getRlLbls : SideEffectsTuple -> QidSet .
  eq getOps(< OS, ELS, RLS >) = OS .
  eq getEqLbls(< OS, ELS, RLS >) = ELS .
  eq getRlLbls(< OS, ELS, RLS >) = RLS .

***(%
\end{verbatim}
}

The main function in the module is \texttt{slice}, which receives as arguments
the module where slicing takes place, the term to be analyzed, the list of terms
standing for the variables used in the slicing process,
and the set of sorts involving side effects. It returns

{\codesize
\begin{verbatim}
%)

  op slice : Module Term TermList SortSet -> SlicingResult .
  ceq slice(M, T, TL, SS) = sliRes(Orange, TL', DS) *** ds(DS) *** htr(HTR, TL') *** hypernode(QS) *** sr(SET)
   if SET := getSETuple(M, getSubsorts(M, SS) ; SS) /\
      TN := getTerm(metaReduce(M, T)) /\
      TV := createVarTerm(M, TN) /\
      QS := getRulesUnifying(M, TV, getRls(M), empty) /\
      HTR := traverseHypernode(M, QS, TV, SET, < none, none, true >) /\
      Orange := getOrange(HTR) /\
      S := firstSort(M, TN) /\
      DS := getDirectionRules(M, S, SS) /\
      TL' := step2(M, TN, getOpsFromRules(M, Orange), TL, varsType(M, TL), DS) .

  op firstSort : Module Term ~> Sort .
  eq firstSort(M, Q[T, TL]) = getType(metaReduce(M, T)) .

***(%
\end{verbatim}
}

The function \texttt{getSubsorts} returns the subsorts of the set of sorts given as
argument:

{\codesize
\begin{verbatim}
%)

  op getSubsorts : Module SortSet -> SortSet .
  eq getSubsorts(M, SS) = getSubsorts(getSubsorts(M), SS) .

  op getSubsorts : SubsortDeclSet SortSet -> SortSet .
  eq getSubsorts(subsort S < S' . SSDS, S' ; SS) = S ; getSubsorts(SSDS, S' ; SS) .
  eq getSubsorts(SSDS, SS) = none [owise] .

***(%
\end{verbatim}
}

The function \texttt{getSETuple} computes the \texttt{SideEffectsTuple} corresponding
to the given module and using the sorts for side effects introduced by the user. It
combines the results from the functions \texttt{traverseOps} and \texttt{traverseRls}:

{\codesize
\begin{verbatim}
%)

  op getSETuple : Module SortSet -> SideEffectsTuple .
  ceq getSETuple(M, SS) = SET'
   if ODS := getOps(M) /\
      SET := traverseOps(M, ODS, getEqs(M), SS, < none, none, none >) /\
      SET' := traverseRls(getRls(M), SET) [print ODS] .

***(%
\end{verbatim}
}

The auxiliary function \texttt{traverseOps} receives the operator declaration and
equations in the module, the set of side-effects sorts, and a the side-effects tuple
and traverses the operator declaration to find the operators in charge of these side
effects:

{\codesize
\begin{verbatim}
%)

  op traverseOps : Module OpDeclSet EquationSet SortSet SideEffectsTuple -> SideEffectsTuple .
  ceq traverseOps(M, op Q : TyL -> Ty [AtS] . ODS, EqS, Ty ; SS, SET) =
                                                 traverseOps(M, ODS, EqS, Ty ; SS, SET')
   if SET' := traverseEqs(EqS, Q, SET) .

  ceq traverseOps(M, op Q : TyL -> Ty [AtS] . ODS, EqS, Ty' ; SS, SET) =
                                                 traverseOps(M, ODS, EqS, Ty' ; SS, SET')
   if SET' := traverseEqs(EqS, Q, SET) /\
      sameKind(M, Ty, Ty') .
  eq traverseOps(M, ODS, EqS, SS, SET) = SET [owise] .

***(%
\end{verbatim}
}

The function \texttt{traverseEqs} receives the equations in the module, an operator
identifier that may generate side effects, and the side-effects tuple, and updates
this tuple by checking whether any equation is applied to this operator at the top:

{\codesize
\begin{verbatim}
%)

  op traverseEqs : EquationSet Qid SideEffectsTuple -> SideEffectsTuple .
  ceq traverseEqs(eq Q[TL] = T [label(Q') AtS] . EqS, Q, < OS, ELS, RLS >) =
                                                               traverseEqs(EqS, Q, SET)
   if SET := < Q ; OS, Q' ; ELS, RLS > .
  ceq traverseEqs(eq C = T [label(Q') AtS] . EqS, Q, < OS, ELS, RLS >) =
                                                               traverseEqs(EqS, Q, SET)
   if getName(C) == Q /\
      SET := < Q ; OS, Q' ; ELS, RLS > .
  ceq traverseEqs(ceq Q[TL] = T if COND [label(Q') AtS] . EqS, Q, < OS, ELS, RLS >) =
                                                               traverseEqs(EqS, Q, SET)
   if SET := < Q ; OS, Q' ; ELS, RLS > .
  ceq traverseEqs(ceq C = T if COND [label(Q') AtS] . EqS, Q, < OS, ELS, RLS >) =
                                                               traverseEqs(EqS, Q, SET)
   if getName(C) == Q /\
      SET := < Q ; OS, Q' ; ELS, RLS > .
  eq traverseEqs(EqS, Q, SET) = SET [owise] .

  op traverseRls : RuleSet SideEffectsTuple -> SideEffectsTuple .
  ceq traverseRls(rl T => T' [label(Q) AtS] . RS, < OS, ELS, RLS >) =
                                                                  traverseRls(RS, SET')
   if checkTerm(T', OS) /\
      SET' := < OS, ELS, RLS ; Q > .
  ceq traverseRls(crl T => T' if COND [label(Q) AtS] . RS, < OS, ELS, RLS >) =
                                                                  traverseRls(RS, SET')
   if (checkTerm(T', OS) or-else checkCond(COND, OS)) /\
      SET' := < OS, ELS, RLS ; Q > .
  eq traverseRls(RS, SET) = SET [owise] .

  op getRulesUnifying : Module Term RuleSet TermList -> QidSet .
  ceq getRulesUnifying(M, T, rl T' => T'' [label(Q) AtS] . RS, TL) =
                                                      Q ; getRulesUnifying(M, T, RS, TL)
   if metaUnify(M, T =? T', 0, 0) :: UnificationPair /\
      notUnification(M, T', TL) . *** metaMatch(M, T, T', nil, 0) :: Substitution .
  ceq getRulesUnifying(M, T, crl T' => T'' if COND [label(Q) AtS] . RS, TL) =
                                                      Q ; getRulesUnifying(M, T, RS, TL)
   if metaUnify(M, T =? T', 0, 0) :: UnificationPair /\
      notUnification(M, T', TL) . *** metaMatch(M, T, T', nil, 0) :: Substitution .
  eq getRulesUnifying(M, T, RS, TL) = none [owise] .

***(%
\end{verbatim}
}

We define a new sort \texttt{HypernodeTraversalResult} that will be used to return
the result obtained when traversing a hypernode. It is composed of a pair of
\texttt{QidSet} standing for the labels in the olive set and the orange set after
the traversal, and
a Boolean value indicating if all the nodes in the hypernode
are orange, that takes the value \texttt{true} initially and is updated when
a new label is processed:

{\codesize
\begin{verbatim}
%)

  sort HypernodeTraversalResult .
  op <_,_,_> : QidSet QidSet Bool -> HypernodeTraversalResult [ctor] .

***(%
\end{verbatim}
}

The function \texttt{traverseHypernode} receives as arguments:
\begin{itemize}
\item
The module where the slicing process takes place.

\item
The set of statements contained in the hypernode that have not been
traversed yet.

\item
The list of terms already used to generate hypernodes. They are used to avoid
non-termination by preventing matchings in the conditions.

\item
The side effects tuple, indicating the operators and rules that may generate side
effects.

\item
The current result of the hypernode, including the nodes in the olive and orange set.
\end{itemize}

{\codesize
\begin{verbatim}
%)

  op traverseHypernode : Module QidSet TermList SideEffectsTuple HypernodeTraversalResult
                         -> HypernodeTraversalResult .
  eq traverseHypernode(M, none, TL, SET, HTR) = HTR .
  ceq traverseHypernode(M, Q ; QS, TL, SET, HTR) = traverseHypernode(M, QS, TL, SET, HTR')
   if Q in SET /\
      HTR' := add2orange(Q, HTR) .
  ceq traverseHypernode(M, Q ; QS, TL, SET, HTR) = traverseHypernode(M, QS, TL, SET, HTR)
   if traversed?(Q, HTR) .
  ceq traverseHypernode(M, Q ; QS, TL, SET, HTR) =
                                if allOrange?(HTR') and not emptyHypernode(M, COND, (T, TL))
                                then add2orange(Q, HTR')
                                else add2olive(Q, HTR')
                                fi
   if COND := getCondition(M, Q) /\
      not Q in SET /\
      not traversed?(Q, HTR) /\
      T := getLHS(M, Q) /\
      HTR' := traverseCond(M, COND, (T, TL), SET, setAllOrangeVar(true, HTR)) .

  op traverseCond : Module Condition TermList SideEffectsTuple HypernodeTraversalResult
                    -> HypernodeTraversalResult .
  eq traverseCond(M, nil, TL, SET, HTR) = setAllOrangeVar(false, HTR) .
  eq traverseCond(M, T = T' /\ COND, TL, SET, HTR) = traverseCond(M, COND, TL, SET, HTR) .
  eq traverseCond(M, T := T' /\ COND, TL, SET, HTR) = traverseCond(M, COND, TL, SET, HTR) .
  eq traverseCond(M, T : S /\ COND, TL, SET, HTR) = traverseCond(M, COND, TL, SET, HTR) .
  ceq traverseCond(M, T => T' /\ COND, TL, SET, HTR) = combineHypernodes(HTR', HTR'')
   if TV := freshTerm(T) /\
      QS := getRulesUnifying(M, TV, getRls(M), TL) /\
      HTR' := traverseHypernode(M, QS, TL, SET, HTR) /\
      HTR'' := traverseCond(M, COND, TL, SET, setAllOrangeVar(true, HTR')) .

  op emptyHypernode : Module Condition TermList -> Bool .
  eq emptyHypernode(M, nil, TL) = true .
  eq emptyHypernode(M, T = T' /\ COND, TL) = emptyHypernode(M, COND, TL) .
  eq emptyHypernode(M, T := T' /\ COND, TL) = emptyHypernode(M, COND, TL) .
  eq emptyHypernode(M, T : S /\ COND, TL) = emptyHypernode(M, COND, TL) .
  ceq emptyHypernode(M, T => T' /\ COND, TL) = if QS == none
                                               then emptyHypernode(M, COND, TL)
                                               else false
                                               fi
   if TV := freshTerm(T) /\
      QS := getRulesUnifying(M, TV, getRls(M), TL) .

  op step2 : Module Term QidSet TermList Type DirectionSet -> TermList .
  ceq step2(M, T, QS, TL, Ty, DS) = if TL == TL'
                                    then TL
                                    else step2(M, T, QS, TL', Ty, DS)
                                    fi
   if TL' := sliceTerm(M, T, QS, TL, Ty, DS) .

  op sliceTerm : Module Term QidSet TermList Type DirectionSet -> TermList .
  eq sliceTerm(M, C, QS, TL, Ty, DS) = TL .
  eq sliceTerm(M, V, QS, TL, Ty, DS) = TL .
  *** Terms in positions in NL generate values
  ceq sliceTerm(M, Q[TL], QS, TL', Ty, [ Q[TL3], NL ] DS) =
                       if anyEqual(getTermsOfSort*(M, getInnocentTerms(TL, NL), Ty), TL')
                       then putTogether(TL'', TL')
                       else TL'
                       fi
   if TL'' := getTermsOfSort(M, Q[TL], Ty) .
  eq sliceTerm(M, Q[TL], QS, TL', Ty, DS) = sliceTerm*(M, TL, QS, TL', Ty, DS) .

  op sliceTerm* : Module TermList QidSet TermList Type DirectionSet -> TermList .
  eq sliceTerm*(M, empty, QS, TL, Ty, DS) = TL .
  ceq sliceTerm*(M, (T, TL), QS, TL', Ty, DS) = sliceTerm*(M, TL, QS, TL'', Ty, DS)
   if TL'' := sliceTerm(M, T, QS, TL', Ty, DS) .

  *** Takes the terms which are NOT in the list.
  op getInnocentTerms : TermList NatList -> TermList .
  eq getInnocentTerms(TL, NL) = getInnocentTerms(TL, NL, 0) .

  op getInnocentTerms : TermList NatList Nat -> TermList .
  eq getInnocentTerms(TL, nil, N) = TL .
  eq getInnocentTerms((T, TL), N NL, N') =
                       if N == N'
                       then getInnocentTerms(TL, NL, s(N'))
                       else T, getInnocentTerms(TL, N NL, s(N'))
                       fi .

  *** Takes the terms which are in the list.
  op getCulpritTerms : TermList NatList -> TermList .
  eq getCulpritTerms(TL, NL) = getCulpritTerms(TL, NL, 0) .

  op getCulpritTerms : TermList NatList Nat -> TermList .
  eq getCulpritTerms(TL, nil, N) = TL .
  eq getCulpritTerms((T, TL), N NL, N') =
                       if N =/= N'
                       then getInnocentTerms(TL, NL, s(N'))
                       else T, getInnocentTerms(TL, N NL, s(N'))
                       fi .

  op getTermsOfSort* : Module TermList Type NatList -> TermList .

  op getTermsOfSort : Module Term Type -> TermList .
  eq getTermsOfSort(M, V, Ty) = empty .
  eq getTermsOfSort(M, C, Ty) = if sortLeq(M, getType(C), Ty)
                                then C
                                else empty
                                fi .
  eq getTermsOfSort(M, Q[TL], Ty) = if sortLeq(M, getType(metaReduce(M, Q[TL])), Ty)
                                    then Q[TL]
                                    else getTermsOfSort*(M, TL, Ty)
                                    fi .

  op getTermsOfSort* : Module TermList Type -> TermList .
  eq getTermsOfSort*(M, empty, Ty) = empty .
  eq getTermsOfSort*(M, (T, TL), Ty) = getTermsOfSort(M, T, Ty),
                                       getTermsOfSort*(M, TL, Ty) .

  op putTogether : TermList TermList -> TermList .
  eq putTogether(empty, TL) = TL .
  eq putTogether((T, TL), TL') = if T in TL'
                                 then putTogether(TL, TL')
                                 else putTogether(TL, (TL', T))
                                 fi .

  op anyEqual : TermList TermList -> Bool .
  eq anyEqual(empty, TL) = false .
  eq anyEqual((T, TL), TL') = T in TL' or-else anyEqual(TL, TL') .

  op _in_ : Term TermList -> Bool .
  eq T in empty = false .
  eq T in (T', TL) = T == T' or-else T in TL .

  op checkTerm : Term QidSet -> Bool .
  eq checkTerm(C, QS) = false .
  eq checkTerm(V, QS) = false .
  eq checkTerm(Q[TL], Q ; QS) = true .
  eq checkTerm(Q[TL], QS) = checkTerm*(TL, QS) [owise] .

  op checkTerm* : Term QidSet -> Bool .
  eq checkTerm*(empty, QS) = false .
  eq checkTerm*((T, TL), QS) = checkTerm(T, QS) or-else checkTerm*(TL, QS) .

  op checkCond : Condition QidSet -> Bool .
  eq checkCond(nil, QS) = false .
  eq checkCond(T = T' /\ COND, QS) = checkCond(COND, QS) .
  eq checkCond(T := T' /\ COND, QS) = checkTerm(T', QS) or-else checkCond(COND, QS) .
  eq checkCond(T : S /\ COND, QS) = checkCond(COND, QS) .
  eq checkCond(T => T' /\ COND, QS) = checkTerm(T, QS) or-else checkCond(COND, QS) .

  op createVarTerm : Module Term ~> Term .
  ceq createVarTerm(M, Q[TL]) = Q[createVarTermList(TyL)]
   if op Q : TyL -> Ty [AtS] . ODS := getOps(M) .

  op createVarTermList : TypeList -> TermList .
  eq createVarTermList(TyL) = createVarTermList(TyL, 0) .

  op createVarTermList : TypeList Nat -> TermList .
  eq createVarTermList(nil, N) = empty .
  ceq createVarTermList(Ty TyL, N) = V, createVarTermList(TyL, s(N))
   if V := qid("V" + string(N, 10) + ":" + string(Ty)) .

  op getEq : Module Qid -> EquationSet .
  eq getEq(M, Q) = getEq(getEqs(M), Q) .

  op getEq : EquationSet Qid -> EquationSet .
  eq getEq(eq T = T' [label(Q) AtS] . EqS, Q) =
                                        eq T = T' [label(Q) AtS] . .
  eq getEq(ceq T = T' if COND [label(Q) AtS] . EqS, Q) =
                                        ceq T = T' if COND [label(Q) AtS] . .
  eq getEq(EqS, Q) = none [owise] .

  op getRl : Module Qid -> RuleSet .
  eq getRl(M, Q) = getRl(getRls(M), Q) .

  op getRl : RuleSet Qid -> RuleSet .
  eq getRl(rl T => T' [label(Q) AtS] . RS, Q) =
                                        rl T => T' [label(Q) AtS] . .
  eq getRl(crl T => T' if COND [label(Q) AtS] . RS, Q) =
                                        crl T => T' if COND [label(Q) AtS] . .
  eq getRl(RS, Q) = none [owise] .

  op getCondition : Module Qid ~> Condition .
  ceq getCondition(M, Q) = getCondition(Eq)
   if Eq := getEq(M, Q) .
  ceq getCondition(M, Q) = getCondition(R)
   if R := getRl(M, Q) .

  op getCondition : Equation -> Condition .
  eq getCondition(eq T = T' [AtS] .) = nil .
  eq getCondition(ceq T = T' if COND [AtS] .) = COND .

  op getCondition : Rule -> Condition .
  eq getCondition(rl T => T' [AtS] .) = nil .
  eq getCondition(crl T => T' if COND [AtS] .) = COND .

  op getLHS : Module Qid ~> Term .
  ceq getLHS(M, Q) = getLHS(Eq)
   if Eq := getEq(M, Q) .
  ceq getLHS(M, Q) = getLHS(R)
   if R := getRl(M, Q) .

  op getLHS : Equation -> Term .
  eq getLHS(eq T = T' [AtS] .) = T .
  eq getLHS(ceq T = T' if COND [AtS] .) = T .

  op getLHS : Rule -> Term .
  eq getLHS(rl T => T' [AtS] .) = T .
  eq getLHS(crl T => T' if COND [AtS] .) = T .

  op getRHS : Module Qid ~> Term .
  ceq getRHS(M, Q) = getRHS(Eq)
   if Eq := getEq(M, Q) .
  ceq getRHS(M, Q) = getRHS(R)
   if R := getRl(M, Q) .

  op getRHS : Equation -> Term .
  eq getRHS(eq T = T' [AtS] .) = T' .
  eq getRHS(ceq T = T' if COND [AtS] .) = T' .

  op getRHS : Rule -> Term .
  eq getRHS(rl T => T' [AtS] .) = T' .
  eq getRHS(crl T => T' if COND [AtS] .) = T' .

  op freshTerm : Term -> Term .
  eq freshTerm(C) = C .
  eq freshTerm(Q[TL]) = Q[freshTerm*(TL)] .
  eq freshTerm(V) = qid(string(getName(V)) + "##:" + string(getType(V))) .

  op freshTerm* : TermList -> TermList .
  eq freshTerm*((T, TL)) = freshTerm(T), freshTerm*(TL) .
  eq freshTerm*(empty) = empty .

  op _in_ : Qid SideEffectsTuple -> Bool .
  eq Q in < OS, Q ; ELS, RLS > = true .
  eq Q in < OS, ELS, Q ; RLS > = true .
  eq Q in SET = false [owise] .

  op olive? : Qid HypernodeTraversalResult -> Bool .
  eq olive?(Q, < Q ; QS, QS', B >) = true .
  eq olive?(Q, HTR) = false [owise] .

  op getOlive : HypernodeTraversalResult -> QidSet .
  eq getOlive(< QS, QS', B >) = QS .

  op getOrange : HypernodeTraversalResult -> QidSet .
  eq getOrange(< QS, QS', B >) = QS' .

  op orange? : Qid HypernodeTraversalResult -> Bool .
  eq orange?(Q, < QS, Q ; QS', B >) = true .
  eq orange?(Q, HTR) = false [owise] .

  op add2olive : Qid HypernodeTraversalResult -> HypernodeTraversalResult .
  eq add2olive(Q, < QS, QS', B >) = < Q ; QS, QS', false > .

  op add2orange : Qid HypernodeTraversalResult -> HypernodeTraversalResult .
  eq add2orange(Q, < QS, QS', B >) = < QS, Q ; QS', B > .

  op setAllOrangeVar : Bool HypernodeTraversalResult -> HypernodeTraversalResult .
  eq setAllOrangeVar(B, < QS, QS', B' >) = < QS, QS', B > .

***(%
\end{verbatim}
}

The combination of hypernodes composes the sets of labels and applies
uses the \texttt{or} operator to update the value that indicates whether
all the nodes in the hypernode are orange:

{\codesize
\begin{verbatim}
%)

  op combineHypernodes : HypernodeTraversalResult HypernodeTraversalResult
                         -> HypernodeTraversalResult .
  eq combineHypernodes(< QS, QS', B >, < QS1, QS2, B' >) =
                                                < QS ; QS1, QS' ; QS2, B or B' > .

***(%
\end{verbatim}
}

The function \texttt{traversed?} indicates if the statement is already
contained in the olive or orange sets:

{\codesize
\begin{verbatim}
%)

  op traversed? : Qid HypernodeTraversalResult -> Bool .
  eq traversed?(Q, HTR) = olive?(Q, HTR) or-else orange?(Q, HTR) .

***(%
\end{verbatim}
}

The function \texttt{allOrange?} returns the third argument of a hypernode,
which indicates whether all the nodes of the current hypernode are orange:

{\codesize
\begin{verbatim}
%)

  op allOrange? : HypernodeTraversalResult -> Bool .
  eq allOrange?(< QS, QS', B >) = B .

***(%
\end{verbatim}
}

The auxiliary function \texttt{notUnification} checks whether the term given
as second argument unifies with any of the terms in the termlist:

{\codesize
\begin{verbatim}
%)

  op notUnification : Module Term TermList -> Bool .
  eq notUnification(M, T, empty) = true .
  eq notUnification(M, T, (T', TL)) = if metaUnify(M, T' =? T, 0, 0) :: UnificationPair
                                      then false
                                      else notUnification(M, T, TL)
                                      fi .

***(%
\end{verbatim}
}

The function \texttt{getOpsFromRules} extracts the operator at the top on the lefthand
sides of the rules of the given rules:

{\codesize
\begin{verbatim}
%)

  op getOpsFromRules : Module QidSet -> QidSet .
  ceq getOpsFromRules(M, Q ; QS) = getRoot(first(TL)) ; getOpsFromRules(M, QS)
   if Q'[TL] := getLHS(M, Q) .
  eq getOpsFromRules(M, QS) = none [owise] .

  op varsType : Module TermList ~> Type .
  eq varsType(M, (T, TL)) = getType(metaReduce(M, T)) .

  op first : TermList ~> Term .
  eq first((T, TL)) = T .

  op getRoot : Term -> Qid .
  eq getRoot(Q[TL]) = Q .
  eq getRoot(T) = T [owise] .
endfm

fmod RELATIONS-GRAPH is
 pr META-LEVEL .

 sorts Entry Graph .
 subsort Entry < Graph .

 op [_,_,_] : Term Term TermList -> Entry [ctor] .

 op mtGraph : -> Graph [ctor] .
 op __ : Graph Graph -> Graph [ctor assoc comm id: mtGraph] .

 vars TL TL' : TermList .
 vars T T' : Term .
 var  G : Graph .

 op add : Term Term TermList Graph -> Graph .
 eq add(T, T', TL, [T, T', TL'] G) = [T, T', merge(TL, TL')] G .
 eq add(T, T', TL, G) = [T, T', TL] G [owise] .

 op merge : TermList TermList -> TermList .
 eq merge(TL, empty) = TL .
 eq merge(TL, (T, TL')) = if contains(TL, T)
                          then merge(TL, TL')
                          else T, merge(TL, TL')
                          fi .

 op get : Graph Term Term -> TermList .
 eq get([T, T', TL] G, T, T') = TL .
 eq get(G, T, T') = empty [owise] .

 op contains : TermList Term -> Bool .
 eq contains(empty, T) = false .
 eq contains((T, TL), T) = true .
 eq contains((T, TL), T') = contains(TL, T') [owise] .

 op updateAllSecond : Graph Term TermList -> Graph .
 eq updateAllSecond(G [T, T', TL], T', TL') = updateAllSecond(G, T', TL')
                                              [T, T', merge(T, TL')] .
 eq updateAllSecond(G, T, TL) = G [owise] .
endfm

fmod INTER-PROCEDURAL-SLICING is
 pr SEMANTICS-SLICING .
 pr RELATIONS-GRAPH .

 var  M : Module .
 *** SV: Slicing vars
 *** CL: Call list
 *** GL: Global
 vars TL TL' SV SV' SV'' CL ORIGSV GL GL' : TermList .
 vars T T' T'' TV DEFS ORIGDEF DEF ID ARGS PARAMS T1 T2 T3 CURRENT B : Term .
 *** OS: Objective sort
 var  OS S : Sort .
 var  SS : SortSet .
 var  SET : SideEffectsTuple .
 *** CO: Call operator
 vars CO Q Q' : Qid .
 vars QS Orange CUR : QidSet .
 vars HTR : HypernodeTraversalResult .
 vars Ty Ty' : Type .
 var  TyL : TypeList .
 var  N : Nat .
 var  V : Variable .
 var  AtS : AttrSet .
 var  ODS : OpDeclSet .
 var  C : Constant .
 vars ST ST' ST1 ST2 ST3 ST4 : SlicingTable .
 var  RS : RuleSet .
 var  COND : Condition .
 vars G G1 G2 G3 : Graph .
 var  DS : DirectionSet .

 sort OpInfoPair .
 op oip : Qid TypeList -> OpInfoPair [ctor] .

 sort SlicingTable .
 op mtTable : -> SlicingTable [ctor] .
 op _|->_ : Term TermList -> SlicingTable [ctor prec 50] .
 op _;_ : SlicingTable SlicingTable -> SlicingTable [ctor assoc comm id: mtTable prec 60] .

 sort StepResult .
 op <_,_> : SlicingTable Graph -> StepResult [ctor] .

 *** For testing purposes
 op sr : Term -> SlicingResult [ctor] .
 op sr : SlicingTable -> SlicingResult [ctor] .

 op srr : SlicingTable Graph -> SlicingResult [ctor] .

 op islice : Module Sort Term TermList SortSet QidSet -> SlicingResult .
 ceq islice(M, OS, DEFS, SV, SS, CUR) = sr(ST')
   if SET := getSETuple(M, getSubsorts(M, SS) ; SS) /\
      S := varsType(M, SV) /\
      TV := createVarSort(M, OS) /\
      CO := getCallOp(M, CUR) /\
      QS := getRulesUnifying(M, TV, getRls(M), empty) /\
      HTR := traverseHypernode(M, QS, TV, SET, < none, none, true >) /\
      Orange := getOrange(HTR) /\
      ST := createTable(DEFS, SV) /\
      DS := getDirectionRules(M, typeFromDefs(M, DEFS), SS) /\
      ST' := fixpoint(M, ST, SV, TV, DEFS, S, Orange, CO, mtGraph, DS) .

 op fixpoint : Module SlicingTable TermList Term Term Sort QidSet Qid Graph
               DirectionSet -> SlicingTable .
 ceq fixpoint(M, ST, ORIGSV, TV, DEFS, S, Orange, CO, G, DS) =
                       if ST == ST4 *** Loop check
                       then ST4
                       else fixpoint(M, ST4, ORIGSV, TV, DEFS, S, Orange, CO, G3, DS)
                       fi
  if < ST1, G1 > := phase1(M, ST, TV, Orange, S, G, DS) /\
     < ST2, G2 > := phase2(M, ST1, DEFS, CO, S, G1) /\
     < ST3, G3 > := phase3(M, ST2, ORIGSV, DEFS, CO, S, G2) /\
     ST4 := ST3 . *** phase4(ST3, DEFS) . *** For global variables

 op phase1 : Module SlicingTable Term QidSet Sort Graph DirectionSet
             -> StepResult .
 eq phase1(M, mtTable, TV, Orange, S, G, DS) = < mtTable, G > .
 ceq phase1(M, T |-> SV ; ST, TV, Orange, S, G, DS) = < T |-> SV' ; ST1 , G1 >
  if T' := substituteBody(TV, T) /\
     TL' := step2(M, T', getOpsFromRules(M, Orange), SV, S, DS) /\
     SV' := addVariables(SV, TL') /\
     < ST1, G1 > := phase1(M, ST, TV, Orange, S, G, DS) .

 op expandGraph : Module Term QidSet Sort Graph DirectionSet -> Graph .
 ceq expandGraph(M, TV, Orange, S, [T, T', SV] G, DS) = [T, T', SV']
                                                        expandGraph(M, TV, Orange, S, G, DS)
  if T'' := substituteBody(TV, T') /\
     TL := step2(M, T'', getOpsFromRules(M, Orange), SV, S, DS) /\
     SV' := addVariables(SV, TL) .
 eq expandGraph(M, TV, Orange, S, mtGraph, DS) = mtGraph .

 op phase2 : Module SlicingTable Term Qid Sort Graph -> StepResult .
 eq phase2(M, ST, DEFS, CO, S, G) = phase2(M, ST, ST, DEFS, CO, S, G) .

 *** The extra table accumulates the effects while the first one is traversed.
 op phase2 : Module SlicingTable SlicingTable Term Qid Sort Graph
             -> StepResult .
 eq phase2(M, mtTable, ST, DEFS, CO, S, G) = < ST, G > .
 ceq phase2(M, T |-> SV ; ST, ST', DEFS, CO, S, G) = phase2(M, ST, ST1, DEFS, CO, S, G1)
  if CL := getCalls(T, CO) /\
     ST1 := updateTable(M, CL, DEFS, ST', SV, S) /\
     G1 := updateGraph(M, CL, DEFS, SV, S, T, G) .

 op updateGraph : Module TermList Term TermList Sort Term Graph -> Graph .
 eq updateGraph(M, empty, DEFS, SV, S, ORIGDEF, G) = G .
 ceq updateGraph(M, (Q[ID, ARGS], CL), DEFS, SV, S, ORIGDEF, G) =
                         updateGraph(M, CL, DEFS, SV, S, ORIGDEF, G1)
  if DEF := look4fun(DEFS, ID) /\
     PARAMS := getParams(DEF) /\
     SV' := newSlicingVars(M, ARGS, SV, PARAMS, S) /\
     G1 := add(ORIGDEF, DEF, SV', G) .

 op updateTable : Module TermList Term SlicingTable TermList Sort -> SlicingTable .
 eq updateTable(M, empty, DEFS, ST, SV, S) = ST .
 ceq updateTable(M, (Q[ID, ARGS], CL), DEFS, ST, SV, S) =
                                                  updateTable(M, CL, DEFS, ST', SV, S)
  if DEF := look4fun(DEFS, ID) /\
     PARAMS := getParams(DEF) /\
     SV' := newSlicingVars(M, ARGS, SV, PARAMS, S) /\
     ST' := add2def(ST, DEF, SV') .

 op add2def : SlicingTable Term TermList -> SlicingTable .
 eq add2def(T |-> SV ; ST, T, SV') = T |-> addVariables(SV, SV') ; ST .
 eq add2def(ST, T, SV) = ST [owise] .

 op phase3 : Module SlicingTable TermList Term Qid Sort Graph -> StepResult .
 eq phase3(M, ST, ORIGSV, DEFS, CO, S, G) = phase3(M, ST, ORIGSV, DEFS, CO, S, ST, G) .

 op phase3 : Module SlicingTable TermList Term Qid Sort SlicingTable Graph
             -> StepResult .
 eq phase3(M, mtTable, ORIGSV, DEFS, CO, S, ST, G) = < ST, G > .
 ceq phase3(M, T |-> SV ; ST, ORIGSV, DEFS, CO, S, ST', G) =
                                              phase3(M, ST, ORIGSV, DEFS, CO, S, ST1, G1)
  if CL := getCalls(T, CO) /\
     < ST1, G1 > := updateTableBackwards(M, ORIGSV, CL, DEFS, S, T, ST', G) .

 op updateTableBackwards : Module TermList Term Term Sort Term SlicingTable Graph
                           -> StepResult .
 eq updateTableBackwards(M, ORIGSV, empty, DEFS, S, CURRENT, ST, G) = < ST, G > .
 ceq updateTableBackwards(M, ORIGSV, (Q[ID, ARGS], CL), DEFS, S, CURRENT, ST, G) =
                        updateTableBackwards(M, ORIGSV, CL, DEFS, S, CURRENT, ST', G1)
  if DEF := look4fun(DEFS, ID) /\
     PARAMS := getParams(DEF) /\
     SV := get(G, CURRENT, DEF) /\
     SV' := newBackwardsVars(M, ARGS, PARAMS, (SV, ORIGSV), S) /\
     ST' := add2def(ST, CURRENT, SV') /\
     G1 := updateAllSecond(G, CURRENT, SV') .

 op look4vars : SlicingTable Term ~> TermList .
 eq look4vars(T |-> SV ; ST, T) = SV .

 *** It computes the new variables bound from a call. Note that several variables in an
 *** expression might be bound by just one variable in the parameters (e.g. f(a + b)
 *** related to f(x))
 *** First argument: current module.
 *** Second argument: arguments.
 *** Third argument: parameters.
 *** Forth argument: slicing variables for the parameters.
 *** Fifht argument: sort for variables.
 op newBackwardsVars : Module Term Term TermList Sort -> TermList .
 ceq newBackwardsVars(M, ARGS, PARAMS, SV, S) = if containsAny?(PARAMS, SV)
                                                then getVars(M, S, ARGS)
                                                else empty
                                                fi
  if Ty := getType(metaReduce(M, ARGS)) /\
     sortLeq(M, Ty, S) .
 ceq newBackwardsVars(M, C, PARAMS, SV, S) = empty
  if Ty := getType(C) /\
     not sortLeq(M, Ty, S) .
 *** We assume the same constructor for the list of arguments and the list of parameters
 ceq newBackwardsVars(M, Q[TL], Q[TL'], SV, S) = newBackwardsVars*(M, TL, TL', SV, S)
  if getType(metaReduce(M, Q[TL])) =/= S .
 *** In this case we have just one parameter, but the argument is not a constant (e.g. 3)
 *** The parameter might or might not be a constant
 eq newBackwardsVars(M, Q[TL], PARAMS, SV, S) = if containsAny?(PARAMS, SV)
                                                then getVars(M, S, Q[TL])
                                                else empty
                                                fi [owise] .

 op newBackwardsVars* : Module TermList TermList TermList Sort -> TermList .
 eq newBackwardsVars*(M, empty, TL', SV, S) = empty .
 eq newBackwardsVars*(M, (ARGS, TL), (PARAMS, TL'), SV, S) =
           if containsAny?(PARAMS, SV)
           then getVars(M, S, ARGS)
           else empty
           fi, newBackwardsVars*(M, TL, TL', SV, S) .

 *** In this phase we compute and propagate global variables.
 op phase4 : SlicingTable Term -> SlicingTable .
 ceq phase4(ST, DEFS) = ST'
  if GL := getGlobal(ST, DEFS) /\
     ST' := updateWithGlobal(ST, DEFS, GL) .

 op updateWithGlobal : SlicingTable Term TermList -> SlicingTable .
 eq updateWithGlobal(mtTable, DEFS, GL) = mtTable .
 ceq updateWithGlobal(T |-> SV ; ST, DEFS, GL) = T |-> addVariables(SV, GL') ;
                                                 updateWithGlobal(ST, DEFS, GL)
  if ID := getId(T) /\
     DEF := look4fun(DEFS, ID) /\
     B := getBody(DEF) /\
     GL' := globalContained(B, GL) .

 *** We assume no repeated global variables
 op globalContained : Term TermList -> TermList .
 eq globalContained(T, empty) = empty .
 eq globalContained(T, (T', TL)) = if inside?(T', T)
                                   then T'
                                   else empty
                                   fi, globalContained(T, TL) .

 op inside? : Term Term -> Bool .
 eq inside?(T, T) = true .
 ceq inside?(T, Q[TL]) = inside?*(T, TL)
  if T =/= Q[TL] .
 eq inside?(T, T') = false [owise] .

 op inside?* : Term TermList -> Bool .
 eq inside?*(T, empty) = false .
 eq inside?*(T, (T', TL')) = inside?(T, T') or inside?*(T, TL') .

 op getGlobal : SlicingTable Term -> TermList .
 eq getGlobal(mtTable, DEFS) = empty .
 ceq getGlobal(T |-> SV ; ST, DEFS) = addVariables(GL', GL)
  if ID := getId(T) /\
     DEF := look4fun(DEFS, ID) /\
     PARAMS := getParams(DEF) /\
     GL := SV minus PARAMS /\
     GL' := getGlobal(ST, DEFS) .

 op _minus_ : TermList TermList -> TermList .
 eq TL minus empty = TL .
 eq TL minus (T', TL') = (TL quit T') minus TL' .

 op _quit_ : TermList Term -> TermList .
 eq empty quit T = empty .
 eq (T, TL) quit T' = if T == T'
                      then TL quit T'
                      else T, (TL quit T')
                      fi .

 op getVars : Module Sort Term -> TermList .
 ceq getVars(M, S, T) = T
  if Ty := getType(metaReduce(M, T)) /\
     sortLeq(M, Ty, S) .
 ceq getVars(M, S, Q[TL]) = getVars*(M, S, TL)
  if Ty := getType(metaReduce(M, Q[TL])) /\
     not sortLeq(M, Ty, S) .
 eq getVars(M, S, T) = empty [owise] .

 op getVars* : Module Sort TermList -> TermList .
 eq getVars*(M, S, empty) = empty .
 eq getVars*(M, S, (T, TL)) = getVars(M, S, T), getVars*(M, S, TL) .

 *** We assume identifier, parameters, and body
 op getId : Term ~> Term .
 eq getId(Q[T1, T2, T3]) = T1 .

 op getParams : Term ~> Term .
 eq getParams(Q[T1, T2, T3]) = T2 .

 op getBody : Term ~> Term .
 eq getBody(Q[T1, T2, T3]) = T3 .

 op createVarSort : Module Sort -> Term .
 ceq createVarSort(M, S) = Q[TL]
  if oip(Q, TyL) := getInfo(M, S) /\
     TL := termlistFromTypelist(TyL) .

 op getInfo : Module Sort ~> OpInfoPair .
 eq getInfo(M, S) = getInfo(getOps(M), S) .

 op getInfo : OpDeclSet Qid ~> OpInfoPair .
 eq getInfo(op Q : TyL -> S [AtS] . ODS, S) = oip(Q, TyL) .

 op termlistFromTypelist : TypeList -> TermList .
 eq termlistFromTypelist(TyL) = termlistFromTypelist(TyL, 0) .

 op termlistFromTypelist : TypeList Nat -> TermList .
 eq termlistFromTypelist(nil, N) = empty .
 ceq termlistFromTypelist(Ty TyL, N) = V, termlistFromTypelist(TyL, s(N))
  if V := qid("$@#" + string(N, 10) + ":" + string(Ty)) .

 op createTable : Term TermList -> SlicingTable .
 *** We assume it is built with an associative operator.
 eq createTable(Q[TL], TL') = createTable*(TL, TL') .

 op createTable* : TermList TermList -> SlicingTable .
 eq createTable*(empty, TL) = mtTable .
 eq createTable*((T, TL), TL') = T |-> slicingVarsContained(T, TL') ;
                                 createTable*(TL, TL') .

 op slicingVarsContained : Term TermList -> TermList .
 op slicingVarsContained : Term TermList -> TermList .
 eq slicingVarsContained(T, empty) = empty .
 eq slicingVarsContained(T, (C, TL)) = if contains?(T, C)
                                       then C
                                       else empty
                                       fi, slicingVarsContained(T, TL) .

 op containsAny? : Term TermList -> Bool .
 eq containsAny?(T, empty) = false .
 eq containsAny?(T, (T', TL)) = contains?(T, T') or containsAny?(T, TL) .

 op contains? : Term Term -> Bool .
 eq contains?(T, T) = true .
 ceq contains?(Q[TL], T') = contains?*(TL, T')
  if Q[TL] =/= T' .
 eq contains?(T, T') = false [owise] .

 op contains?* : TermList Term -> Bool .
 eq contains?*(empty, T) = false .
 eq contains?*((T, TL), T') = contains?(T, T') or contains?*(TL, T') .

 op substituteBody : Term Term -> Term .
 *** We assume the body is the last term in the definition (after the identifier and the parameters).
 *** We assume the code is the first term in the representation of the computation.
 *** It could be checked by looking for the same sort in both terms.
 eq substituteBody(Q[T, TL], Q'[TL', T']) = Q[T', TL] .

 op getCallOp : Module QidSet -> Qid .
 eq getCallOp(M, Q ; CUR) = getCallOp(getRls(M), Q) .

 op getCallOp : RuleSet Qid -> Qid .
 *** We assume the code is the first term in the representation of the computation.
 eq getCallOp(rl Q[CO[TL], TL'] => T' [label(Q') AtS] . RS, Q') = CO .
 eq getCallOp(crl Q[CO[TL], TL'] => T' if COND [label(Q') AtS] . RS, Q') = CO .

 *** We assume the function definitions are built with an associative operator.
 *** We assume the identifier is the first term in both the call and the definition.
 *** We also assume it is the same.
 op look4fun : Term Term ~> Term .
 eq look4fun(Q[TL], T) = look4fun*(TL, T) .

 op look4fun* : TermList Term ~> Term .
 eq look4fun*((Q[T, TL], TL'), T) = Q[T, TL] .
 eq look4fun*((T, TL), T') = look4fun*(TL, T') .

 *** We assume the operator for arguments is associative.
 *** First argument: module
 *** Second argument: arguments.
 *** Third argument: current slicing vars.
 *** Fourth argument: parameters.
 *** Fifth argument: sort for variables.
 op newSlicingVars : Module Term TermList Term Sort -> TermList .
 *** If the function has just one variable, we check whether the argument contains
 *** a slicing variable
 ceq newSlicingVars(M, T, SV, T', S) = if containsAny?(T, SV)
                                       then T'
                                       else empty
                                       fi
  if S := getType(metaReduce(M, T')) .
 *** If it has more than one argument, we traverse the list of parameters/arguments.
 ceq newSlicingVars(M, Q[TL], SV, Q'[TL'], S) = newSlicingVars*(TL, SV, TL')
  if S =/= getType(metaReduce(M, Q'[TL'])) .
 *** Otherwise, there are no slicing variables
 eq newSlicingVars(M, T, SV, T', S) = empty [owise] .

 op newSlicingVars* : TermList TermList TermList -> TermList .
 eq newSlicingVars*(empty, SV, TL) = empty .
 eq newSlicingVars*((T, TL), SV, (T', TL')) = if containsAny?(T, SV)
                                              then T'
                                              else empty
                                              fi, newSlicingVars*(TL, SV, TL') .

 op addVariables : TermList TermList -> TermList .
 eq addVariables(TL, empty) = TL .
 eq addVariables(TL, (T, TL')) = if inList?(T, TL)
                                 then empty
                                 else T
                                 fi, addVariables(TL, TL') .

 *** Used to add variables to the slicing variables set.
 op inList? : Term TermList -> Bool .
 eq inList?(T, empty) = false .
 eq inList?(T, (T', TL)) = T == T' or inList?(T, TL) .

 op getCalls : Term Qid -> TermList .
 eq getCalls(Q[TL], CO) = if Q == CO
                          then Q[TL]
                          else getCalls*(TL, CO)
                          fi .
 *** Constant and variables
 eq getCalls(T, CO) = empty [owise] .

 op getCalls* : TermList Qid -> TermList .
 eq getCalls*(empty, CO) = empty .
 eq getCalls*((T, TL), CO) = getCalls(T, CO), getCalls*(TL, CO) .

 op typeFromDefs : Module Term -> Type .
 eq typeFromDefs(M, Q[TL, Q'[TL', T]]) = getType(metaReduce(M, T)) .
endfm

