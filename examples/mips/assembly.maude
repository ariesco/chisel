load ../../slicing.prj

(fmod REGISTERS is
  pr INT .

  sort RegId .
  subsort Int < RegId .

  op reg : Nat -> RegId [ctor] .
  ops R1 R2 R3 R4 R5 R6 R7 R8 : -> RegId [ctor] .
  ops v0 v1 v2 v3 v4 v5 v6 v7 v8 : -> RegId [ctor] .
  ops a0 a1 a2 a3 a4 a5 a6 a7 a8 at : -> RegId [ctor] .
  ops s0 s1 s2 s3 s4 s5 s6 s7 s8 : -> RegId [ctor] .
  ops t0 t1 t2 t3 t4 t5 t6 t7 t8 : -> RegId [ctor] .
  ops $f0 $f1 $f2 $f3 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $31 : -> RegId [ctor] .
  ops zero gp ra sp $fcc0 : -> RegId [ctor] .
  ops hi lo acc : -> RegId [ctor] .

  *** Only for slicing purposes
  ops memAcc0 memAcc1 : -> RegId [ctor] .

  sort Value .
  subsort Int < Value .

  sort Register .
  op <_`,_> : RegId Value -> Register [ctor] .

  sort Registers .
  subsort Register < Registers .
  op mtReg : -> Registers [ctor] .
  op __ : Registers Registers -> Registers [ctor assoc comm id: mtReg] .

  vars R R' : RegId .
  var  RS : Registers .
  vars V V' : Int .

  op _`[_`] : Registers RegId -> Value .
  eq [lur1] : (< R, V > RS) [R] = V .
  eq [lur2] : RS [R] = 0 [owise] .

  op update : RegId Value Registers -> Registers .
  eq [upd_int1] : update(R, V, < R, V' > RS) = < R, V > RS .
  eq [upd_int2] : update(R, V, RS) = < R, V > RS [owise] .
endfm)

(fmod INS-SYNTAX is
  pr REGISTERS .
  pr QID .

  sorts BasicIns LabelIns Ins .
  subsort BasicIns LabelIns < Ins .

  sort Imm .
  subsort Qid Nat < Imm .

  *** add R1, R2, R3 : R1 <- R2 + R3 (overflow trap)
  op add_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** addu R1, R2, R3 : R1 <- R2 + R3
  op addu_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** addi R1, R2, I : R1 <- R2 + I (overflow trap)
  op addi_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** addiu R1, R2, I : R1 <- R2 + I
  op addiu_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** sub R1, R2, R3 : R1 <- R2 - R3
  op sub_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** subu R1, R2, R3 : R1 <- R2 - R3 (unsigned)
  op subu_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** subi R1, R2, I : R1 <- R2 - I
  op subi_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** mul R1, R2, R3 : R1 <- R2 * R3
  op mul_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** mul R1, R2 : R1 <- R1 * R2
  op mul_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** multu R1, R2 : acc <- R1 * R2
  op multu_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** muli R1, R2, I : R1 <- R2 * I
  op muli_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** div R1, R2, R3 : R1 <- R2 * R3
  op div_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** and R1, R2, R3 : R1 <- R2 and R3
  op and_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** andi R1, R2, I : R1 <- R2 and I
  op andi_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** or R1, R2, R3 : R1 <- R2 or R3
  op or_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** ori R1, R2, I : R1 <- R2 or I
  op ori_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** xor R1, R2, R3 : R1 <- R2 xor R3
  op xor_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** xori R1, R2, I : R1 <- R2 xor I
  op xori_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** nor R1, R2, R3 : R1 <- not (R2 or R3)
  op nor_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** str R1, R2 : mem[R1] <- R2
  op str_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** load R1, R2 : mem[R1] -> R2
  op load_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** jr R1 : PC <- R12
  op jr_ : RegId -> BasicIns [ctor prec 15 format(!r o o)] .
  *** j I : PC <- I
  op j_ : Imm -> BasicIns [ctor prec 15 format(!r o o)] .
  *** jal I : function call to I
  op jal_ : Imm -> BasicIns [ctor prec 15 format(!r o o)] .
  *** beq R1, R2, I : PC <- I if R1 == R2
  op beq_`,_`,_ : RegId RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** bne R1, R2, I : PC <- I if R1 =/= R2
  op bne_`,_`,_ : RegId RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** beqz R, N : PC <- N if R == 0
  op beqz_`,_ : RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** bgtz R, N : PC <- N if R == 0
  op bgtz_`,_ : RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** bgez R, N : PC <- N if R == 0
  op bgez_`,_ : RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** blez R, N : PC <- N if R >= 0
  op blez_`,_ : RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** bnez R, N : PC <-  N if R == 0
  op bnez_`,_ : RegId Imm -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** bc1t R : PC <- R if math co-processor condition bit 1 is true
  op bc1t_ : Imm -> BasicIns [ctor prec 15 format(!r o o)] .
  op nop : -> BasicIns [ctor format(!r o)] .
  op break : -> BasicIns [ctor format(!r o)] .

  *** sb R1, N(R2) : mem[R2 + N] <- R1 (8 bits)
  op sb_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** sh R1, N(R2) : mem[R2 + N] <- R1 (16 bits)
  op sh_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** sw R1, N(R2) : mem[R2 + N] <- R1 (32 bits)
  op sw_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** sw R1, N(R2) : mem[R2 + N] <- R1 (32 bits)
  op swAux_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** swr R1, N(R2) : mem[R2 + N] <- R1 (right)
  op swr_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** swl R1, N(R2) : mem[R2 + N] <- R1 (left)
  op swl_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** li R, I : R <- I (32 bits)
  op li_`,_ : RegId Int -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** lui R, I : R <- I (16 bits)
  op lui_`,_ : RegId Int -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** lbu R1, N(R2) : R1 <- Mem[R2 + N] (8 bits)
  op lbu_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** lhu R1, N(R2) : R1 <- Mem[R2 + N] (16 bits)
  op lhu_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** lb R1, N(R2) : R1 <- Mem[R2 + N] (8 bits)
  op lb_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** lh R1, N(R2) : R1 <- Mem[R2 + N] (8 bits)
  op lh_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** lw R1, N(R2) : R1 <- Mem[R2 + N] (32 bits)
  op lw_`,_`(_`) : RegId Int RegId -> BasicIns [ctor prec 15 format(!r o o o o o o o)] .
  *** sra R1, R2, N : R1 <- R2 >> N
  op sra_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** srl R1, R2, N : R1 <- R2 >> N
  op srl_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** sll R1, R2, N : R1 <- R2 << N
  op sll_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** sllv R1, R2, R3 : R1 <- R2 << R3
  op sllv_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** srav R1, R2, R3 : R1 <- R2 >> R3
  op srav_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** slti R1, R2, I : R1 <- R2 < I
  op slti_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** sltiu R1, R2, I : R1 <- R2 < I
  op sltiu_`,_`,_ : RegId RegId Int -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** slt R1, R2, R3 : R1 <- R2 < R3
  op slt_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** sltu R1, R2, R3 : R1 <- R2 < R3 (unsigned)
  op sltu_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** move R1, R2 : R1 <- R2 (32 bits)
  op move_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** negu R1, R2 : R1 <- - R2 (32 bits)
  op negu_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** movf R1, R2, R3 : R1 <- R2 if R3 == 0
  op movf_`,_`,_ : RegId RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o o o)] .
  *** cvt.d.w R1, R2 : R1 <- R2 (format translation)
  op cvt.d.w_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** cvt.s.w R1, R2 : R1 <- R2 (format translation)
  op cvt.s.w_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** cvt.s.d R1, R2 : R1 <- R2 (format translation)
  op cvt.s.d_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** cvt.d.s R1, R2 : R1 <- R2 (format translation)
  op cvt.d.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** c.le.d R1, R2 : R1 <- R2 (format translation)
  op c.le.d_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** c.le.s R1, R2 : R1 <- R2 (format translation)
  op c.le.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** c.lt.s R1, R2 : R1 <- R2 (format translation)
  op c.lt.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** c.lt.d R1, R2 : R1 <- R2 (format translation)
  op c.lt.d_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** c.eq.s R1, R2 : R1 <- R2 (format translation)
  op c.eq.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** cvt.w.s R1, R2 : R1 <- R2 (format translation)
  op cvt.w.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** nopcvt.d.s R1, R2 : R1 <- R2 (format translation)
  op nopcvt.d.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** trunc.w.d R1, R2 : R1 <- R2 (format translation)
  op trunc.w.d_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** trunc.w.s R1, R2 : R1 <- R2 (format translation)
  op trunc.w.s_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** mfc1 R1, R2 : R1 <- R2 (format translation)
  op mfc1_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** mtc1 R1, R2 : R1 <- R2 (format translation)
  op mtc1_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** ctc1 R1, R2 : R1 <- R2 (format translation)
  op ctc1_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** cfc1 R1, R2 : R1 <- R2 (format translation)
  op cfc1_`,_ : RegId RegId -> BasicIns [ctor prec 15 format(!r o o o o)] .
  *** bc1f N : PC <- N
  op bc1f_ : Imm -> BasicIns [ctor prec 15 format(!r o o)] .
  *** mfhi R : R <- HI
  op mfhi_ : RegId -> BasicIns [ctor prec 12 format(!r o o)] .
  *** mflo R : R <- LO
  op mflo_ : RegId -> BasicIns [ctor prec 12 format(!r o o)] .

  op __ : Qid BasicIns -> LabelIns [ctor prec 20 format(!b o o)] .

  sort InsList .
  subsort Ins < InsList .

  op skip : -> InsList [ctor] .
  op __ : InsList InsList -> InsList [ctor assoc id: skip prec 25 format(o n o)] .
endfm)

(fmod MEMORY is
  pr INT .

  sort MemCell .
  op `[_`,_`] : Nat Int -> MemCell [ctor] .

  sort Memory .
  subsort MemCell < Memory .
  op mtMem : -> Memory [ctor] .
  op __ : Memory Memory -> Memory [ctor assoc comm id: mtMem] .

  var  M : Memory .
  vars I I' : Int .
  var  N : Nat .

  op _`[_`] : Memory Nat -> Int .
  eq [lp1] : ([N, I] M) [N] = I .
  eq [lp2] : M [N] = 0 [owise] .

  op set : Memory Nat Int -> Memory .
  eq [set1] : set([N, I] M, N, I') = [N, I'] M .
  eq [set2] : set(M, N, I) = [N, I] M [owise] .
endfm)

(mod SEMANTICS is
  pr INS-SYNTAX .
  pr MEMORY .

  sort IndexIns .
  op _:_ : Nat Ins -> IndexIns [ctor prec 25] .

  sort IndexInsList .
  subsort IndexIns < IndexInsList .

  op skipIIL : -> IndexInsList [ctor] .
  op _;_ : IndexInsList IndexInsList -> IndexInsList [ctor assoc id: skipIIL format(o o n o)] .

  vars IIL IIL' IIL'' : IndexInsList .
  var  IL : InsList .
  var  INS : Ins .
  vars N N' PC PC' PC'' : Nat .
  var  BI : BasicIns .
  vars Q Q' : Qid .
  var  RI RI' RI'' : RegId .
  vars RS RS' : Registers .
  vars M M' : Memory .
  vars I I' : Int .

  sorts System Instructions .

  subsort InsList IndexInsList < Instructions .

  op `[_|_|_|_`] : Instructions Registers Memory Nat -> System [ctor] .

  eq [prepare] : [ IL | RS | M | PC] =
                 [ preprocess(IL) | RS | M | PC] .

  crl [add] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (add RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, I + I', RS) .

  crl [addu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (addu RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, abs(I) + abs(I'), RS) .

  crl [addi] : [IIL | RS | M | PC]
   =>          [IIL | RS' | M | PC + 1]
   if (addi RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, I + I', RS) .

  crl [addiu] : [IIL | RS | M | PC]
   =>          [IIL | RS' | M | PC + 1]
   if (addiu RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, I + I', RS) .

  crl [sub] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (sub RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, I - I', RS) .

  crl [subu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (subu RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, abs(I) - abs(I'), RS) .

  crl [subi] : [IIL | RS | M | PC]
   =>          [IIL | RS' | M | PC + 1]
   if (subi RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, I' - I, RS) .

  crl [mul] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (mul RI, RI') := getIns(IIL, PC) /\
      I := RS [RI] /\
      I' := RS [RI'] /\
      RS' := update(RI, I * I', RS) .

  crl [mul] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (mul RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, I * I', RS) .

  crl [multu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (multu RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI'] /\
      RS' := update(acc, abs(I) * abs(I'), RS) .

  crl [muli] : [IIL | RS | M | PC]
   =>          [IIL | RS' | M | PC + 1]
   if (muli RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, I * I', RS) .

  crl [div] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (div RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, I quo I', RS) .

  crl [and] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (and RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, andWithInt(I, I'), RS) .

  crl [andi] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (andi RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, andWithInt(I, I'), RS) .

  crl [or] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (or RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, orWithInt(I, I'), RS) .

  crl [ori] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (ori RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, orWithInt(I, I'), RS) .

  crl [xor] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (xor RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, xorWithInt(I, I'), RS) .

  crl [xori] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (xori RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, xorWithInt(I, I'), RS) .

  crl [nor] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (nor RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, notWithInt(orWithInt(I, I')), RS) .

  crl [sra] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (sra RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, shiftRightWithInt(I', I), RS) .

  crl [srl] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (srl RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, shiftRightWithInt(I', I), RS) .

  crl [sll] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (sll RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, shiftLeftWithInt(I', I), RS) .

  crl [sllv] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (sllv RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, shiftLeftWithInt(I, I'), RS) .

  crl [srav] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (srav RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, shiftRightWithInt(I, I'), RS) .

  crl [str] : [IIL | RS | M | PC]
   =>         [IIL | RS | M' | PC + 1]
   if (str RI, RI') := getIns(IIL, PC) /\
      N := RS [RI] /\
      I := RS [RI'] /\
      M' := set(M, N, I) .

  crl [load] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (load RI, RI') := getIns(IIL, PC) /\
      I := RS [RI] /\
      I' := M [I] /\
      RS' := update(RI', I', RS) .

  crl [jr] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC']
   if (jr RI) := getIns(IIL, PC) /\
      PC' := RS [RI] .

  crl [jmp] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC']
   if (j PC') := getIns(IIL, PC) .

  crl [jal] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC + 1]
   if (jal PC') := getIns(IIL, PC) /\
      [IIL | RS | M | PC'] => [IIL | RS' | M' | PC''] /\
      nop := getIns(IIL, PC'') .

  crl [beq] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC']
   if (beq RI, RI', N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      I' := RS [RI'] /\
      PC' := if I == I'
             then N
             else PC + 1
             fi .

  crl [bne] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC']
   if (bne RI, RI', N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      I' := RS [RI'] /\
      PC' := if I =/= I'
             then N
             else PC + 1
             fi .

  crl [beqz] : [IIL | RS | M | PC]
   =>          [IIL | RS | M | PC']
   if (beqz RI, N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      PC' := if I == 0
             then PC + N
             else PC + 1
             fi .

  crl [bgtz] : [IIL | RS | M | PC]
   =>          [IIL | RS | M | PC']
   if (bgtz RI, N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      PC' := if I > 0
             then PC + N
             else PC + 1
             fi .

  crl [bgez] : [IIL | RS | M | PC]
   =>          [IIL | RS | M | PC']
   if (bgez RI, N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      PC' := if I >= 0
             then N
             else PC + 1
             fi .

  crl [blez] : [IIL | RS | M | PC]
   =>          [IIL | RS | M | PC']
   if (blez RI, N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      PC' := if I <= 0
             then PC + N
             else PC + 1
             fi .

  crl [bnez] : [IIL | RS | M | PC]
   =>          [IIL | RS | M | PC']
   if (bnez RI, N) := getIns(IIL, PC) /\
      I := RS [RI] /\
      PC' := if I =/= 0
             then N
             else PC + 1
             fi .

  crl [nop] : [ IIL | RS | M | PC]
   =>         [ IIL | RS | M | PC + 1]
   if nop := getIns(IIL, PC) .

  *** The current implementation stores complete numbers when bit representation is
  *** required. It does not modify the static analysis.
  crl [sb] : [IIL | RS | M | PC]
   =>        [IIL | RS | M' | PC + 1]
   if (sb RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI] /\
      N' := RS [RI'] /\
      M' := set(M, N + N', I) .

  crl [sh] : [IIL | RS | M | PC]
   =>        [IIL | RS | M' | PC + 1]
   if (sh RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI] /\
      N' := RS [RI'] /\
      M' := set(M, N + N', I) .

  crl [sw] : [IIL | RS | M | PC]
   =>        [IIL | RS | M' | PC + 1]
   if (sw RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI] /\
      N' := RS [RI'] /\
      M' := set(M, N + N', I) .

  crl [swl] : [IIL | RS | M | PC]
   =>        [IIL | RS | M' | PC + 1]
   if (swl RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI] /\
      N' := RS [RI'] /\
      M' := set(M, N + N', I) .

  crl [swr] : [IIL | RS | M | PC]
   =>        [IIL | RS | M' | PC + 1]
   if (swr RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI] /\
      N' := RS [RI'] /\
      M' := set(M, N + N', I) .

  crl [li] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (li RI, I) := getIns(IIL, PC) /\
      RS' := update(RI, I, RS) .

  crl [lui] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (lui RI, I) := getIns(IIL, PC) /\
      RS' := update(RI, I, RS) .

  crl [lbu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (lbu RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := M [I + N] /\
      RS' := update(RI, I', RS) .

  crl [lhu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (lhu RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := M [I + N] /\
      RS' := update(RI, I', RS) .

  crl [lb] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (lb RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := M [I + N] /\
      RS' := update(RI, I', RS) .

  crl [lh] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (lh RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := M [I + N] /\
      RS' := update(RI, I', RS) .

  crl [lw] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (lw RI, N(RI')) := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := M [I + N] /\
      RS' := update(RI, I', RS) .

  crl [slti] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (slti RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, I' <i I, RS) .

  crl [sltiu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (sltiu RI, RI', I) := getIns(IIL, PC) /\
      I' := RS [RI'] /\
      RS' := update(RI, abs(I') <i abs(I), RS) .

  crl [slt] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (slt RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, I <i I', RS) .

  crl [sltu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (sltu RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := update(RI, abs(I) <i abs(I'), RS) .

  crl [move] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (move RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [negu] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (negu RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, (- 1) * I, RS) .

  crl [movf] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (movf RI, RI', RI'') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      I' := RS [RI''] /\
      RS' := if I' == 0
             then update(RI, I + I', RS)
             else RS
             fi .

  crl [cvt.d.w] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (cvt.d.w RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [cvt.s.w] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (cvt.s.w RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [cvt.s.d] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (cvt.s.d RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [cvt.d.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (cvt.d.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [c.le.d] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (c.le.d RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [c.le.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (c.le.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [c.lt.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (c.lt.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [c.lt.d] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (c.lt.d RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [c.eq.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (c.eq.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [cvt.w.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (cvt.w.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [nopcvt.d.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (nopcvt.d.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [trunc.w.d] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (trunc.w.d RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [trunc.w.s] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (trunc.w.s RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [mfc1] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (mfc1 RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [mtc1] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (mtc1 RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [ctc1] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (ctc1 RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [cfc1] : [IIL | RS | M | PC]
   =>         [IIL | RS' | M | PC + 1]
   if (cfc1 RI, RI') := getIns(IIL, PC) /\
      I := RS [RI'] /\
      RS' := update(RI, I, RS) .

  crl [bc1t] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | N]
   if (bc1t N) := getIns(IIL, PC) .

  crl [bc1f] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | N]
   if (bc1f N) := getIns(IIL, PC) .

  crl [mfhi] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC + 1]
   if (mfhi RI) := getIns(IIL, PC) /\
      I := RS [hi] /\
      RS' := update(RI, I, RS) .

  crl [mflo] : [IIL | RS | M | PC]
   =>         [IIL | RS | M | PC + 1]
   if (mflo RI) := getIns(IIL, PC) /\
      I := RS [lo] /\
      RS' := update(RI, I, RS) .

  *********************************************************************
  ************************ Normalization steps ************************
  *********************************************************************

  op preprocess : InsList -> IndexInsList .
  ceq preprocess(IL) = IIL''
   if IIL := putIndices(IL) /\
      IIL' := normalize(IIL) /\
      IIL'' := clean(IIL') .

  op putIndices : InsList -> IndexInsList .
  eq putIndices(IL) = putIndices(IL, 0) .

  op putIndices : InsList Nat -> IndexInsList .
  eq putIndices(skip, N) = skipIIL .
  eq putIndices(INS IL, N) = (N : INS) ; putIndices(IL, s(N)) .

  op normalize : IndexInsList -> IndexInsList .
  eq normalize(IIL) = normalize(IIL, IIL) .

  op normalize : IndexInsList IndexInsList -> IndexInsList .
  eq normalize(skipIIL, IIL) = IIL .
  eq normalize(N : BI ; IIL, IIL') = normalize(IIL, IIL') .
  ceq normalize(N : Q BI ; IIL, IIL') = normalize(IIL, IIL'')
   if IIL'' := substitute(Q, N, IIL') .

  op substitute : Qid Nat IndexInsList -> IndexInsList .
  eq substitute(Q, N, skipIIL) = skipIIL .
  eq substitute(Q, N, N' : INS ; IIL) = N' : substitute(Q, N, INS) ;
                                        substitute(Q, N, IIL) .

  op substitute : Qid Nat Ins -> Ins .
  eq substitute(Q, N, Q' BI) = Q' substitute(Q, N, BI) .
  eq substitute(Q, N, (addi RI, RI', Q)) = addi RI, RI', N .
  eq substitute(Q, N, (subi RI, RI', Q)) = subi RI, RI', N .
  eq substitute(Q, N, (beq RI, RI', Q)) = beq RI, RI', N .
  eq substitute(Q, N, j Q) = j N .
  eq substitute(Q, N, BI) = BI [owise] .

  op clean : IndexInsList -> IndexInsList .
  eq clean(skipIIL) = skipIIL .
  eq clean(N : Q BI ; IIL) = N : BI ; clean(IIL) .
  eq clean(N : BI ; IIL) = N : BI ; clean(IIL) .

  op quitIndices : IndexInsList -> InsList .
  eq quitIndices(skipIIL) = skip .
  eq quitIndices((N : INS) ; IIL) = INS quitIndices(IIL) .

  *********************************************************************
  ************************ Auxiliary functions ************************
  *********************************************************************
  op andWithInt : Int Int -> Int [comm] .
  eq andWithInt(0, I) = 0 .
  eq andWithInt(I, I') = 1 [owise] .

  op orWithInt : Int Int -> Int [comm] .
  eq orWithInt(0, 0) = 0 .
  eq orWithInt(I, I') = 1 [owise] .

  op notWithInt : Int -> Int .
  eq notWithInt(0) = 1 .
  eq notWithInt(I) = 0 [owise] .

  op xorWithInt : Int Int -> Int [comm] .
  eq xorWithInt(0, I) = if I =/= 0 then 1 else 0 fi .

  op shiftLeftWithInt : Int Int -> Int .
  eq shiftLeftWithInt(I, I') = I' .

  op shiftRightWithInt : Int Int -> Int .
  eq shiftRightWithInt(I, I') = I' .

  op getIns : IndexInsList Nat ~> BasicIns .
  eq getIns(IIL ; PC : BI ; IIL', PC) = BI .

  op _<i_ : Int Int -> Int .
  eq I <i I' = if I < I' then 1 else 0 fi .
endm)

eof

(memory inferences .)

*** Memory Registers

(context update sorts .)

*** Memory

