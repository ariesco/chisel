load assembly.maude

(mod TEST is
  pr SEMANTICS .

  op testIns : -> InsList .
  eq testIns = addi R1, R1, 5
               addi R2, R2, 10
               add  R3, R1, R2
        'loop  subi R4, R3, 10
               j   'loop
               break
  .

  *** Let x be the value in Mem[0] and y the value in Mem[1]
  *** It computes x ** y and stores it in Mem[2]
  op pow : -> InsList .
  eq pow = sub  R1, R1, R1       *** Make sure R1 contains 0
           load R1, R1           *** Load M[0] in R1 (function from left to right)
           sub  R2, R2, R2       *** Make sure R2 contains 0
           addi R2, R2, 1        *** Add 1 and save it in R2
           load R2, R2           *** Load M[1] in R2
           sub  R3, R3, R3       *** For comparing with 0
           sub  R4, R4, R4       *** Initialize R4
           addi R4, R4, 1        *** Add 1 and save it in R4
  'loop    beq  R2, R3, 'out     *** Jump to out when R2 and R3 are equal
           mul  R4, R4, R1       *** Store in R4 the result of R4 * R1
           subi R2, R2, 1        *** Update the counter
           j    'loop            *** Jump to loop
  'out     sub  R5, R5, R5       *** Make sure R5 contains 0
           addi R5, R5, 2        *** Add 2 and save it in R5
           str  R5, R4           *** Store the value of R4 in position R5
                                 *** (function from right to left)
           break
  .

  op test : -> InsList .
  eq test =
      'inc
	addiu   sp,sp,-32
	sw      ra,28(sp)
	sw      s8,24(sp)
	move    s8,sp
	sw      a0,32(s8)
	li      v0,1
	sw      v0,16(s8)
	li      v0,1
	sw      v0,20(s8)
	lw      a0,32(s8)
	lw      a1,16(s8)
	jal     'add
	nop
	lw      a0,20(s8)
	jal     'inc
	nop
	move    sp,s8
	lw      ra,28(sp)
	lw      s8,24(sp)
	addiu   sp,sp,32
	jr      ra
	nop

     'add
	addiu   sp,sp,-8
	sw      s8,4(sp)
	move    s8,sp
	sw      a0,8(s8)
	sw      a1,12(s8)
	lw      v1,8(s8)
	lw      v0,12(s8)
	addu    v0,v1,v0
	sw      v0,8(s8)
	move    sp,s8
	lw      s8,4(sp)
	addiu   sp,sp,8
	jr      ra
	nop

     'a
			addiu   sp,sp,-24
			sw      ra,20(sp)
			sw      s8,16(sp)
			move    s8,sp
			sw      a0,24(s8)
			sw      a1,28(s8)
			lw      v0,24(s8)
			slti    v0,v0,2
			bnez    v0,'a_0x44
			nop
			lw      a0,24(s8)
			lw      a1,28(s8)
			jal     'add
			nop
			lw      a0,28(s8)
			jal     'inc
			nop

     'a_0x44		move    sp,s8
			lw      ra,20(sp)
			lw      s8,16(sp)
			addiu   sp,sp,24
			jr      ra
			nop


     'b
			addiu   sp,sp,-24
			sw      ra,20(sp)
			sw      s8,16(sp)
			move    s8,sp
			sw      a0,24(s8)
			sw      a1,28(s8)
			lw      v0,24(s8)
			blez    v0, 'b_0x40
			nop
			lw      v1,24(s8)
			lw      v0,28(s8)
			addu    v0,v1,v0
			move    a0,v0
			lw      a1,28(s8)
			jal     'b
			nop
     'b_0x40		move    sp,s8
			lw      ra,20(sp)
			lw      s8,16(sp)
			addiu   sp,sp,24
			jr      ra
			nop
		.

  op main : -> InsList .
  eq main =
     'main
				addiu   sp,sp,-40
				sw      ra,36(sp)
				sw      s8,32(sp)
				move    s8,sp
				sw      zero,16(s8)
				li      v0,1
				sw      v0,20(s8)
				li      v0,-1
				sw      v0,24(s8)
				j       'main_0x5c
				nop
     'main+0x2c
  		lw      a0,16(s8)
				lw      a1,20(s8)
				jal     'a
				nop
				lw      a0,16(s8)
				lw      a1,24(s8)
				jal     'b
				nop
				lw      a0,24(s8)
				lw      a1,20(s8)
				jal     'a
				nop

     'main_0x5c
   	lw      v0,20(s8)
				slti    v0,v0,11
				bnez    v0, 'main_0x2c
				nop
				move    sp,s8
				lw      ra,36(sp)
				lw      s8,32(sp)
				addiu   sp,sp,40
				jr      ra
				nop
 .

  op ifm-test : -> InsList .
  eq ifm-test = test main .

  op testSys : -> System .
  eq testSys = [ preprocess(ifm-test) | mtReg | mtMem | 0 ] .

  op testMain : -> System .
  eq testMain = [ preprocess(main) | mtReg | mtMem | 0 ] .

  op testPow : -> System .
  eq testPow = [ preprocess(pow) | mtReg | [0, 3] [1, 5] | 0 ] .
endm)

(set side-effect sorts Memory Registers .)

(dataflow inferences InsList .)

(slice testMain wrt v0 .)

(slice ifm-test wrt v0 .)