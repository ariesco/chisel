load ../wfe.maude

***
*** EXAMPLE 8
***

(mod EXAMPLE is
 pr EVALUATION-WHILE .

 op myFuns : -> FunSet .
 eq myFuns = 'Main (nv)
{
	Call 'check_mega128_values_task ('empty)
}

'check_mega128_values_task ('empty)
{
	Call 'SpiIsSelected ('empty) ;
	(If (Not Equal ('__res_SpiIsSelected, 1)) And (Equal ('spi_was_interrupted, 1))
	Then
	(
		If Equal ('mega128_receive_valid, 1)
		Then
		(
			'time_since_last_mega128 := 0 ;
			'mega128_ok := 1 ;
			If Equal ('mode, 'MODE_AUTO)
			Then Call 'servo_set ('from_mega128.channels)
		)
	)) ;
	If Equal ('time_since_last_mega128, 'STALLED_TIME)
	Then 'mega128_ok := 0
}

'SpiIsSelected ('empty)
{
	Call 'bit_is_set ('SPI_PIN, 'SPI_SS_PIN) ;
	'__res_SpiIsSelected := '__res_bit_is_set
}

'bit_is_set ('sfr, 'bit)
{
	If (Equal ('sfr, 1)) And (Equal ('bit, 1))
	Then '__res_bit_is_set := 1
	Else '__res_bit_is_set := 0
}

'servo_set ('values)
{
	Call 'ServoSet ('values)
}

'ServoSet ('values)
{
	Local 'servo_value ;
	Local '_var_roll ;
	Local 'SERVO_MOTOR_LEFT ;
	Local 'SERVO_MOTOR_RIGHT ;
	Local 'SERVO_ELEVATOR ;
	Local 'SERVO_AILERON_LEFT ;
	Local 'SERVO_AILERON_RIGHT ;
	Local 'SERVO_RUDDER ;
	Call 'lookup_arr ('values, 'RADIO_GAIN1) ;
	'servo_value := 'SERVO_MOTOR_LEFT +. ((2 *. '__res_lookup_arr) *. 'SERVO_MOTOR_LEFT_TRAVEL) ;
	Call 'ChopServo ('servo_value) ;
	Call 'update_arr ('servo_widths, 'SERVO_MOTOR_LEFT, '__res_ChopServo) ;
	Call 'lookup_arr ('values, 'RADIO_THROTTLE) ;
	'servo_value := 'SERVO_MOTOR_RIGHT +. ((2 *. '__res_lookup_arr) *. 'SERVO_MOTOR_RIGHT_TRAVEL) ;
	Call 'ChopServo ('servo_value) ;
	Call 'update_arr ('servo_widths, 'SERVO_MOTOR_RIGHT, '__res_ChopServo) ;
	Call 'lookup_arr ('values, 'RADIO_PITCH) ;
	'servo_value := 'SERVO_ELEVATOR +. ('__res_lookup_arr *. 'SERVO_ELEVATOR_TRAVEL) ;
	Call 'ChopServo ('servo_value) ;
	Call 'update_arr ('servo_widths, 'SERVO_ELEVATOR, '__res_ChopServo) ;
	Call 'lookup_arr ('values, 'RADIO_ROLL) ;
	'_var_roll := '__res_lookup_arr ;
	Local '__tmp_1 ;
	(If Gt ('_var_roll, 0)
	Then '__tmp_1 := 1
	Else '__tmp_1 := 'AILERON_DIFF) ;
	'servo_value := 'SERVO_AILERON_LEFT +.
			(('__tmp_1 *. '_var_roll) *. 'SERVO_AILERON_LEFT_TRAVEL) ;
	Call 'ChopServo ('servo_value) ;
	Call 'update_arr ('servo_widths, 'SERVO_AILERON_LEFT, '__res_ChopServo) ;
	(If Gt ('_var_roll, 0)
	Then '__tmp_1 := 'AILERON_DIFF
	Else '__tmp_1 := 1) ;
	'servo_value := 'SERVO_AILERON_RIGHT +. (('__tmp_1 *. '_var_roll) *. 'SERVO_AILERON_RIGHT_TRAVEL) ;
	Call 'ChopServo ('servo_value) ;
	Call 'update_arr ('servo_widths, 'SERVO_AILERON_RIGHT, '__res_ChopServo) ;
	Local '__tmp_2 ;
	Call 'lookup_arr ('values, 'RADIO_ROLL) ;
	'__tmp_2 := '__res_lookup_arr ;
	Call 'lookup_arr ('values, 'RADIO_YAW) ;
	'servo_value := 'SERVO_RUDDER +.
			('__res_lookup_arr +. (('__tmp_2 *. 'COMBI_SWITCH) *. 'SERVO_RUDDER_TRAVEL)) ;
	Call 'ChopServo ('servo_value) ;
	Call 'update_arr ('servo_widths, 'SERVO_RUDDER, '__res_ChopServo)
}

'lookup_arr ('a, 'idx)
{
	'__res_lookup_arr := 'a +. 'idx
}

'ChopServo ('value)
{
	If Lt ('value, 'SERVO_MIN)
	Then '__res_ChopServo := 'SERVO_MIN
	Else
	(
		If Gt ('value, 'SERVO_MAX)
		Then '__res_ChopServo := 'SERVO_MAX
		Else '__res_ChopServo := 'value
	)
}

'update_arr ('a, 'idx, 'val)
{
	Call 'lookup_arr ('a, 'idx) ;
	'__res_update_arr := 'val
} .

endm)

(set side-effect sorts ESt RWBUF .)

(set context-update rules CallF .)

eof

(islice Statement with defs myFuns wrt 'spi_was_interrupted .)

(islice Statement with defs myFuns wrt 'mega128_receive_valid 'mega128_ok .)

(islice Statement with defs myFuns wrt 'time_since_last_mega128 'mode .)

(islice Statement with defs myFuns wrt 'SERVO_MOTOR_LEFT 'SERVO_MOTOR_RIGHT
                                       'SERVO_ELEVATOR 'SERVO_AILERON_LEFT
                                       'SERVO_AILERON_RIGHT 'SERVO_RUDDER .)

(islice Statement with defs myFuns wrt 'RADIO_GAIN1 'RADIO_THROTTLE 'RADIO_PITCH
                                       'RADIO_ROLL 'RADIO_YAW .)

(islice Statement with defs myFuns wrt '__res_SpiIsSelected '__res_ChopServo
                                       '__res_SERVO_NEUTRAL '__res_lookup_arr
                                       '__res_update_arr .)

(islice Statement with defs myFuns wrt '__res_lookup_arr '__res_update_arr .)

(red myFuns .)