load ../wfe.maude

***
*** EXAMPLE 7
***

(mod EXAMPLE is
 pr EVALUATION-WHILE .

 op myFuns : -> FunSet .
 eq myFuns = 'Main (nv)
{
	Call 'send_data_to_autopilot_task (nv)
}

'send_data_to_autopilot_task (nv)
{
	Call 'SpiIsSelected (nv) ;
	If (Not Equal ('__res_SpiIsSelected, 1)) And Equal ('spi_was_interrupted, 1)
	Then
	(
		'spi_was_interrupted := 0 ;
		Call 'to_autopilot_from_last_radio (nv) ;
		Call 'spi_reset (nv)
	)
}

'SpiIsSelected (nv)
{
	Call 'bit_is_set ('SPI_PIN, 'SPI_SS_PIN) ;
	'__res_SpiIsSelected := '__res_bit_is_set
}

'bit_is_set ('sfr, 'bit)
{
	If (Equal ('sfr, 1)) And (Equal ('bit, 1))
	Then '__res_bit_is_set := 1
	Else '__res_bit_is_set := 0
}

'to_autopilot_from_last_radio (nv)
{
	Local 'i ;
	'to_mega128.channels_0 := 'last_radio_0 ;
	'to_mega128.channels_1 := 'last_radio_1 ;
	'to_mega128.channels_2 := 'last_radio_2 ;
	'to_mega128.channels_3 := 'last_radio_3 ;
	'to_mega128.channels_4 := 'last_radio_4 ;
	'to_mega128.channels_5 := 'last_radio_5 ;
	'to_mega128.channels_6 := 'last_radio_6 ;
	'to_mega128.channels_7 := 'last_radio_7 ;
	'to_mega128.channels_8 := 'last_radio_8 ;
	(If Equal ('radio_ok, 1)
	Then
	(
		Call 'BV ('STATUS_RADIO_OK) ;
		'to_mega128.status := '__res_BV
	)
	Else 'to_mega128.status := 0) ;
	(If Equal ('last_radio_contains_avg_channels, 1)
	Then
	(
		Call 'BV ('AVERAGED_CHANNELS_SENT) ;
***		'to_mega128.status := 'to_mega128.status |. '__res_BV ;
		'to_mega128.status := 'to_mega128.status +. '__res_BV ;
		'last_radio_contains_avg_channels := 0
	)) ;
	'to_mega128.ppm_cpt := 'last_ppm_cpt ;
	Local '__tmp_1 ;
	'__tmp_1 := 'vsupply_adc_buf.sum +. 'AV_NB_SAMPLE ;
	Call 'VoltageOfAdc ('__tmp_1) ;
	'to_mega128.vsupply := '__res_VoltageOfAdc *. 10 ;
	'to_mega128.vsupply := 0
}

'spi_reset (nv)
{
	'idx_buf := 0 ;
	'xor_in := 0 ;
	Call 'lookup_arr ('to_mega128, 'idx_buf) ;
	'xor_out := '__res_lookup_arr ;
	'SPDR := 'xor_out ;
	'mega128_receive_valid := 0
}

'lookup_arr ('a, 'idx)
{
	'__res_lookup_arr := 'a +. 'idx
}

'BV ('a)
{
	'__res_BV := 'a
}

'VoltageOfAdc ('adc)
{
	'__res_VoltageOfAdc := ('VOLTAGE_ADC_A *. 'adc) +. 'VOLTAGE_ADC_B
}

.

 *****************

 ops test1 test2 test3 test4 test5 test6 test7 test8 test9
     test10 test11 : -> Statement .

 eq test1 = <
 	Call 'Main (nv),
 'SPI_PIN	=	2
 'SPI_SS_PIN	=	2
 'last_ppm_cpt	=	1
 'last_radio_0	=	3
 'last_radio_1	=	3
 'last_radio_2	=	3
 'last_radio_3	=	1
 'last_radio_4	=	3
 'last_radio_5	=	1
 'last_radio_6	=	3
 'last_radio_7	=	2
 'last_radio_8	=	3
 'last_radio_contains_avg_channels	=	2
 'mega128_receive_valid	=	3
 'radio_ok	=	1
 'spi_was_interrupted	=	1
 'to_mega128	=	1
 'to_mega128_ppm_cpt	=	2
 'to_mega128_status	=	1
 'to_mega128_vsupply	=	3
 'vsupply_adc_buf_sum	=	2
 ,
 nb,
 myFuns > .
endm)

(set side-effect sorts ESt RWBUF .)

(set context-update rules CallF .)

(rew test1 .)

eof

(islice Statement with defs myFuns wrt 'spi_was_interrupted .)

(islice Statement with defs myFuns wrt 'last_radio_0 'last_radio_1
                         'last_radio_2 'last_radio_3 'last_radio_4
                         'last_radio_5 'last_radio_6 'last_radio_7
                         'last_radio_8 'last_radio_contains_avg_channels .)

(islice Statement with defs myFuns wrt 'to_mega128.status 'to_mega128.vsupply
                                       'to_mega128.ppm_cpt .)

(islice Statement with defs myFuns wrt 'to_mega128.status .)

(islice Statement with defs myFuns wrt 'STATUS_RADIO_OK 'AVERAGED_CHANNELS_SENT
                                       'AV_NB_SAMPLE 'VOLTAGE_ADC_A 'VOLTAGE_ADC_B .)

(islice Statement with defs myFuns wrt '__res_VoltageOfAdc '__res_BV '__res_lookup_arr
                    		                 '__res_bit_is_set '__res_SpiIsSelected .)

(islice Statement with defs myFuns wrt '__res_lookup_arr .)

(red myFuns .)