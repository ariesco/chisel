load wfe.maude

(mod EXAMPLE is
 pr EVALUATION-WHILE .

  op pow : -> Com .
  eq pow = x := 1 ;
           i := y ;
           While Not Equal(i, 0) Do
             x := x *. y ;
             i := i -. 1 .

  op foo : -> Com .
  eq foo = x := 1 ;
           y := 2 ;
           z := x +. y ;
           If Not Equal(x, y)
           Then w := 0 .

  op testPow : -> Statement .
  eq testPow = < pow, y = 5 x = 0 i = 0, nb, nf > .

  op testFoo : -> Statement .
  eq testFoo = < foo, mt, nb, nf > .

 op myFuns : -> FunSet .
 eq myFuns = 'Main (nv) { Local i ;
                          Local j ;
                          sum := 0 ;
                          i := 1 ;
                          j := 2 ;
                          While (Not Equal(i, 11)) Do
                            Call 'A (sum, i ) ;
                            Call 'B (sum, j ) ;
                            Call 'A (j, i ) ;
                            i := i +. j }
             'A (x, y) { If (Not Equal(x, 1))
                          Then Call 'Add ( x, y ) ;
                               Call 'Inc ( y ) }
             'B (x, y) { If (Not Equal(x, 0))
                          Then Call 'B ( (x +. y), y )
                        }
             'Add (a, b) { a := a +. b }
             'Inc (z) { Local i ;
                        Local j ;
                        i := 1 ;
                        i := j ;
                        Call 'Add ( z, i ) } .

endm)

(rew < Local i ;
       Local j ;
       sum := 0 ;
       i := 1 ;
       j := 2 ;
       While (Not Equal(i, 11)) Do
         (Call 'A (sum, i ) ;
         Call 'B (sum, j ) ;
         Call 'A (j, i ) ;
         i := i +. j), sum = 0 i = 0 j = 0 x = 0 y = 0 z = 0, nb, myFuns > .)

eof

(debug < Local i ;
       Local j ;
       sum := 0 ;
       i := 1 ;
       j := 2 ;
       While (Not Equal(i, 11)) Do
         (Call 'A (sum, i ) ;
         Call 'B (sum, j ) ;
         Call 'A (j, i ) ;
         i := i +. j), sum = 0 i = 0 j = 0 x = 0 y = 0 z = 0, nb, myFuns >
=>*
< skip,i = 11 j = 2 sum = 0 x = 0 y = 0 z = 0,nb,'A(x,y){If Not Equal(x,1)Then
Call 'Add(x,y);
Call 'Inc(y)}
'Add(a,b){a := a +. b}
'B(x,y){If Not Equal(x,0)Then
Call 'B(x +. y,y)}
'Inc(z){Local i ;
Local j ;
i := 1 ;
i := j ;
Call 'Add(z,i)}
'Main(nv){Local i ;
Local j ;
sum := 0 ;
i := 1 ;
j := 2 ;
While Not Equal(i,11)Do
Call 'A(sum,i)
;
Call 'B(sum,j);
Call 'A(j,i);
i := i +. j}            > .)

(set side-effect sorts ESt RWBUF .)

(set context-update rules CallF .)

(dataflow inferences Com .)

(islice Statement with defs myFuns wrt i .)

eof

(dataflow inferences Com .)

(slice pow wrt x .)

(slice pow wrt y .)

(set context-update rules CallF .)

(islice Statement with defs myFuns wrt i .)

