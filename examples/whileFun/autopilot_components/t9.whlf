load ../wfe.maude

***
*** EXAMPLE 14
***

(mod EXAMPLE is
 pr EVALUATION-WHILE .

 op myFuns : -> FunSet .
 eq myFuns = 'Main (nv)
{
  Call 'receive_gps_data_task ('empty)
}

'receive_gps_data_task ('empty)
{
	Call 'send_gps_pos ('empty) ;
	Call 'send_radIR ('empty) ;
	Call 'send_takeOff ('empty)
}

'send_gps_pos ('empty)
{
	'gps_msg_received := 0 ;
	If Equal ('gps_pos_available, 1)
	Then
	(
		Call 'DOWNLINK_SEND_GPS('gps_mode, 'gps_utm_east, 'gps_utm_north,
			'gps_fcourse, 'gps_falt, 'gps_fspeed, 'gps_fclimb, 'gps_ftow);
		Call 'estimator_update_state_gps ('empty)
	)
}

'DOWNLINK_SEND_GPS('gps_mode, 'gps_utm_east, 'gps_utm_north, 'gps_fcourse,
		'gps_falt, 'gps_fspeed, 'gps_fclimb, 'gps_ftow)
{
	If Gt ('MODEM_CHECK_FREE_SPACE, 33)
	Then
	(
          Call 'ModemStartMessage ('DL_GPS) ;
          Call 'MODEM_PUT_1_BYTE_BY_ADDR ('gps_mode) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_utm_east) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_utm_north) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_fcourse) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('desired_course) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_falt) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_fspeed) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_fclimb) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('gps_ftow) ;
          Call 'ModemEndMessage ('empty)
        )
        Else 'modem_nb_ovrn := 'modem_nb_ovrn +. 1

}

'ModemStartMessage ('DL_CALIB_START)
{
	If Equal ('DL_CALIB_START, 1)
	Then '__res_ModemStartMessage := 1
	Else '__res_ModemStartMessage := 0
}

'ModemEndMessage ('empty)
{
	'__res_ModemEndMessage := 1
}

'MODEM_PUT_1_BYTE_BY_ADDR ('data)
{
	'__res_MODEM_PUT_1_BYTE_BY_ADDR := 'data
}

'MODEM_PUT_4_BYTE_BY_ADDR ('data)
{
	'__res_MODEM_PUT_4_BYTE_BY_ADDR := 'data
}

'estimator_update_state_gps ('empty)
{
	If Equal ('gps_mode, 3)
	Then
	(
		'estimator_x := 'gps_east ;
		'estimator_y := 'gps_north ;
		'estimator_z := 'gps_falt ;
		'estimator_hspeed_mod := 'gps_fspeed ;
		'estimator_hspeed_dir := 'gps_fcourse ;
		'estimator_z_dot := 'gps_fclimb ;
		If Equal ('estimator_flight_time, 1)
		Then Call 'estimator_update_ir_estim ('empty)
  	)
}

'estimator_update_ir_estim ('empty)
{
	'to_complete := 1
}

'send_radIR ('empty)
{
	If Equal ('gps_pos_available, 1)
	Then Call 'DOWNLINK_SEND_RAD_OF_IR('estimator_ir, 'estimator_rad,
		'estimator_rad_of_ir, 'ir_roll_neutral, 'ir_pitch_neutral)
}

'DOWNLINK_SEND_RAD_OF_IR ('estimator_ir, 'estimator_rad, 'estimator_rad_of_ir,
			'ir_roll_neutral, 'ir_pitch_neutral)
{
	If Gt ('MODEM_CHECK_FREE_SPACE, 20)
	Then
	(
          Call 'ModemStartMessage ('DL_RAD_OF_IR) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('estimator_ir) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('estimator_rad) ;
          Call 'MODEM_PUT_4_BYTE_BY_ADDR ('estimator_rad_of_ir) ;
          Call 'MODEM_PUT_2_BYTE_BY_ADDR ('ir_roll_neutral) ;
          Call 'MODEM_PUT_2_BYTE_BY_ADDR ('ir_pitch_neutral) ;
          Call 'ModemEndMessage ('empty)
        )
        Else 'modem_nb_ovrn := 'modem_nb_ovrn +. 1
}

'send_takeOff ('empty)
{
	If Equal ('gps_pos_available, 1)
	Then
	(
		(If ((Not Equal ('estimator_flight_time, 1)) And
			Gt ('estimator_hspeed_mod, 'MIN_SPEED_FOR_TAKEOFF))
		Then
		(
			'estimator_flight_time := 1 ;
			'launch := 1 ;
			Call 'DOWNLINK_SEND_TAKEOFF ('cputime)
		)) ;
		'gps_pos_available := 0
	)
}

'DOWNLINK_SEND_TAKEOFF ('cputime)
{
	If Gt ('MODEM_CHECK_FREE_SPACE, 6)
	Then
	(
          Call 'ModemStartMessage ('DL_TAKEOFF) ;
          Call 'MODEM_PUT_2_BYTE_BY_ADDR ('cputime) ;
          Call 'ModemEndMessage ('empty)
        )
        Else 'modem_nb_ovrn := 'modem_nb_ovrn +. 1
}

'MODEM_PUT_2_BYTE_BY_ADDR ('data)
{
	'__res_MODEM_PUT_2_BYTE_BY_ADDR := 'data
} .

 ***********************************

 ops test1 test2 test3 test4 test5 test6 test7 test8 test9
     test10 test11 : -> Statement .

 eq test1 = <
 	Call 'Main (nv),
 'DL_GPS	=	1
 'DL_RAD_OF_IR	=	1
 'DL_TAKEOFF	=	3
 'MIN_SPEED_FOR_TAKEOFF	=	0
 'MODEM_CHECK_FREE_SPACE	=	1
 'cputime	=	3
 'desired_course	=	2
 'estimator_flight_time	=	1
 'estimator_hspeed_dir	=	1
 'estimator_hspeed_mod	=	3
 'estimator_ir	=	0
 'estimator_rad	=	2
 'estimator_rad_of_ir	=	3
 'estimator_x	=	0
 'estimator_y	=	2
 'estimator_z	=	1
 'estimator_z_dot	=	3
 'gps_east	=	2
 'gps_falt	=	2
 'gps_fclimb	=	1
 'gps_fcourse	=	0
 'gps_fspeed	=	1
 'gps_ftow	=	1
 'gps_mode	=	3
 'gps_msg_received	=	3
 'gps_north	=	1
 'gps_pos_available	=	2
 'gps_utm_east	=	1
 'gps_utm_north	=	0
 'ir_pitch_neutral	=	2
 'ir_roll_neutral	=	1
 'launch	=	1
 ,
 nb,
 myFuns > .

endm)

(set side-effect sorts ESt RWBUF .)

(set context-update rules CallF .)

(rew test1 .)

eof

1. (islice Statement with defs myFuns wrt 'gps_mode .)

2. (islice Statement with defs myFuns wrt 'gps_fcourse 'gps_speed 'gps_climb
                                          'gps_ftow 'gps_falt .)

3. (islice Statement with defs myFuns wrt 'gps_east 'gps_north 'gps_pos_available .)

4. (islice Statement with defs myFuns wrt 'estimator_hspeed_mod 'estimator_flight_time .)

5. (islice Statement with defs myFuns wrt 'estimator_rad_of_ir 'estimator_rad 'estimator_ir .)

6. (islice Statement with defs myFuns wrt '__res_ModemStartMessage '__res_ModemEndMessage
		                                        '__res_MODEM_PUT_1_BYTE_BY_ADDR '__res_MODEM_PUT_2_BYTE_BY_ADDR
		                                        '__res_MODEM_PUT_4_BYTE_BY_ADDR .)

7. (islice Statement with defs myFuns wrt '__res_MODEM_PUT_1_BYTE_BY_ADDR '__res_MODEM_PUT_2_BYTE_BY_ADDR
                                        		'__res_MODEM_PUT_4_BYTE_BY_ADDR .)

	1. { gps_mode } -> file t9_gps_mode_whlf.slice
	2. { gps_fcourse, gps_speed, gps_climb, gps_ftow, gps_falt }
	-> file t9_gps_funct_params_whlf.slice
	3. { gps_east, gps_north, gps_pos_available }
		-> file t9_gps_coord_whlf.slice
	4. { estimator_hspeed_mod, estimator_flight_time }
		-> file t9_estimator_coord_params_whlf.slice
	5. { estimator_rad_of_ir, estimator_rad, estimator_ir }
		-> file t9_estimator_funct_params_whlf.slice
	6. { __res_ModemStartMessage, __res_ModemEndMessage,
		__res_MODEM_PUT_1_BYTE_BY_ADDR, __res_MODEM_PUT_2_BYTE_BY_ADDR,
		__res_MODEM_PUT_4_BYTE_BY_ADDR } -> file t9_res_whlf.slice
	7. { __res_MODEM_PUT_1_BYTE_BY_ADDR, __res_MODEM_PUT_2_BYTE_BY_ADDR,
		__res_MODEM_PUT_4_BYTE_BY_ADDR }
		-> file t9_modem_comm_whlf.slice

(red myFuns .)