load ../wfe.maude

***
*** EXAMPLE 16
***

(mod EXAMPLE is
 pr EVALUATION-WHILE .

 op myFuns : -> FunSet .
 eq myFuns = 'Main (nv)
{
  Call 'altitude_control_task ('empty)
}

'altitude_control_task ('empty)
{
	If (Equal ('pprz_mode, 'PPRZ_MODE_AUTO2) Or
		(Equal ('pprz_mode, 'PPRZ_MODE_HOME)))
	Then
	(
		If Equal ('vertical_mode, 'VERTICAL_MODE_AUTO_ALT)
		Then Call 'altitude_pid_run ('empty)
	)
}

'altitude_pid_run ('empty)
{
	Local 'err ;
	'err := 'estimator_z -. 'desired_altitude ;
	'desired_climb := 'pre_climb +. ('altitude_pgain *. 'err) ;
	(If Lt ('desired_climb, 'CLIMB_MAX_m)
	Then 'desired_climb := 'CLIMB_MAX_m) ;
	If Gt ('desired_climb, 'CLIMB_MAX)
	Then 'desired_climb := 'CLIMB_MAX
} .

 ***********************************

 ops test1 test2 test3 test4 test5 test6 test7 test8 test9
     test10 test11 : -> Statement .

 eq test1 = <
 	Call 'Main (nv),
 'CLIMB_MAX	=	1
 'CLIMB_MAX_m	=	3
 'altitude_pgain	=	3
 'desired_altitude	=	3
 'desired_climb	=	3
 'err	=	2
 'estimator_z	=	1
 'pprz_mode	=	3
 'pre_climb	=	1
 'vertical_mode	=	0
 ,
 nb,
 myFuns > .

endm)

(set side-effect sorts ESt RWBUF .)

(set context-update rules CallF .)

(rew test1 .)

eof

1. (islice Statement with defs myFuns wrt 'pprz_mode .)

2. (islice Statement with defs myFuns wrt 'vertical_mode .)

3. (islice Statement with defs myFuns wrt 'desired_climb 'desired_altitude .)

4. (islice Statement with defs myFuns wrt 'PPRZ_MODE_AUTO2 'PPRZ_MODE_HOME .)

	1. { pprz_mode } -> file t11_pprz_mode_whlf.slice
	2. { vertical_mode } -> file t11_vertical_mode_whlf.slice
	3. { desired_climb, desired_altitude } -> file t11_desired_whlf.slice
	4. { PPRZ_MODE_AUTO2, PPRZ_MODE_HOME } -> file t11_params_whlf.slice

(red myFuns .)